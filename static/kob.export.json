{
  "desc": {
    "parameters": [
      {
        "type": "ParameterTypeNumber",
        "index": 0,
        "name": "waveform",
        "paramId": "poly/osc1/waveform",
        "minimum": 0,
        "maximum": 4,
        "exponent": 1,
        "steps": 5,
        "initialValue": 1,
        "isEnum": true,
        "enumValues": [
          "none",
          "sine",
          "saw",
          "square",
          "noise"
        ],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 1,
        "name": "level",
        "paramId": "poly/osc1/level",
        "minimum": 0,
        "maximum": 0.5,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0.25,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 2,
        "name": "waveform",
        "paramId": "poly/osc2/waveform",
        "minimum": 0,
        "maximum": 4,
        "exponent": 1,
        "steps": 5,
        "initialValue": 0,
        "isEnum": true,
        "enumValues": [
          "none",
          "sine",
          "saw",
          "square",
          "noise"
        ],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 3,
        "name": "level",
        "paramId": "poly/osc2/level",
        "minimum": 0,
        "maximum": 0.5,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 4,
        "name": "type",
        "paramId": "poly/filter2/type",
        "minimum": 0,
        "maximum": 4,
        "exponent": 1,
        "steps": 5,
        "initialValue": 0,
        "isEnum": true,
        "enumValues": [
          "none",
          "low-pass",
          "high-pass",
          "bandpass",
          "notch"
        ],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 5,
        "name": "freq",
        "paramId": "poly/filter2/freq",
        "minimum": 0,
        "maximum": 5000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 6,
        "name": "q",
        "paramId": "poly/filter2/q",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0.01,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 7,
        "name": "type",
        "paramId": "poly/filter1/type",
        "minimum": 0,
        "maximum": 4,
        "exponent": 1,
        "steps": 5,
        "initialValue": 0,
        "isEnum": true,
        "enumValues": [
          "none",
          "low-pass",
          "high-pass",
          "bandpass",
          "notch"
        ],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 8,
        "name": "freq",
        "paramId": "poly/filter1/freq",
        "minimum": 0,
        "maximum": 5000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 9,
        "name": "q",
        "paramId": "poly/filter1/q",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0.01,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 10,
        "name": "waveform",
        "paramId": "poly/osc3/waveform",
        "minimum": 0,
        "maximum": 4,
        "exponent": 1,
        "steps": 5,
        "initialValue": 0,
        "isEnum": true,
        "enumValues": [
          "none",
          "sine",
          "saw",
          "square",
          "noise"
        ],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 11,
        "name": "level",
        "paramId": "poly/osc3/level",
        "minimum": 0,
        "maximum": 0.5,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 12,
        "name": "time",
        "paramId": "poly/delay/time",
        "minimum": 1,
        "maximum": 2000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 220,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 13,
        "name": "wet",
        "paramId": "poly/delay/wet",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 14,
        "name": "feedback",
        "paramId": "poly/delay/feedback",
        "minimum": 0,
        "maximum": 0.999,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0.25,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 15,
        "name": "stereo-delay",
        "paramId": "poly/delay/stereo-delay",
        "minimum": 0,
        "maximum": 500,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 16,
        "name": "attack",
        "paramId": "poly/adsr/attack",
        "minimum": 0,
        "maximum": 2000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 10,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "ms",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 17,
        "name": "delay",
        "paramId": "poly/adsr/delay",
        "minimum": 0,
        "maximum": 2000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 60,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "ms",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 18,
        "name": "sustain",
        "paramId": "poly/adsr/sustain",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0.8,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "ms",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 19,
        "name": "release",
        "paramId": "poly/adsr/release",
        "minimum": 0,
        "maximum": 2000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 300,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "ms",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 20,
        "name": "lowcut",
        "paramId": "poly/overdrive/lowcut",
        "minimum": 0,
        "maximum": 100,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "LowCut",
        "unit": "%",
        "order": 1,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 21,
        "name": "highcut",
        "paramId": "poly/overdrive/highcut",
        "minimum": 0,
        "maximum": 100,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "HighCut",
        "unit": "%",
        "order": 2,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 22,
        "name": "drive",
        "paramId": "poly/overdrive/drive",
        "minimum": 0,
        "maximum": 100,
        "exponent": 1,
        "steps": 0,
        "initialValue": 25,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "Drive",
        "order": 3,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 23,
        "name": "mix",
        "paramId": "poly/overdrive/mix",
        "minimum": 0,
        "maximum": 100,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "Mix",
        "unit": "%",
        "order": 9,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 24,
        "name": "volume",
        "paramId": "poly/overdrive/volume",
        "minimum": -100,
        "maximum": 75,
        "exponent": 1,
        "steps": 0,
        "initialValue": -20,
        "isEnum": false,
        "enumValues": [],
        "displayName": "Volume",
        "unit": "%",
        "order": 8,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 25,
        "name": "midfreq",
        "paramId": "poly/overdrive/midfreq",
        "minimum": -100,
        "maximum": 100,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "MidFreq",
        "unit": "%",
        "order": 5,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 26,
        "name": "treble",
        "paramId": "poly/overdrive/treble",
        "minimum": -100,
        "maximum": 100,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "Treble",
        "unit": "%",
        "order": 7,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 27,
        "name": "mid",
        "paramId": "poly/overdrive/mid",
        "minimum": -100,
        "maximum": 100,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "Mid",
        "unit": "%",
        "order": 6,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 28,
        "name": "bass",
        "paramId": "poly/overdrive/bass",
        "minimum": -100,
        "maximum": 100,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "Bass",
        "unit": "%",
        "order": 4,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 29,
        "name": "fm",
        "paramId": "poly/fm/fm",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 2,
        "initialValue": 1,
        "isEnum": true,
        "enumValues": [
          "off",
          "on"
        ],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 30,
        "name": "level",
        "paramId": "poly/fm/level",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 31,
        "name": "freq",
        "paramId": "poly/fm/freq",
        "minimum": 1,
        "maximum": 1000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "kHz",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 32,
        "name": "index",
        "paramId": "poly/fm/index",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 33,
        "name": "octdamp",
        "paramId": "poly/reverb/octdamp",
        "minimum": 0,
        "maximum": 100,
        "exponent": 1,
        "steps": 0,
        "initialValue": 50,
        "isEnum": false,
        "enumValues": [],
        "displayName": "OctDamp",
        "unit": "%",
        "order": 14,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 34,
        "name": "octvol",
        "paramId": "poly/reverb/octvol",
        "minimum": 0,
        "maximum": 100,
        "exponent": 1,
        "steps": 0,
        "initialValue": 50,
        "isEnum": false,
        "enumValues": [],
        "displayName": "OctVol",
        "unit": "%",
        "order": 13,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 35,
        "name": "mix",
        "paramId": "poly/reverb/mix",
        "minimum": 0,
        "maximum": 100,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "Mic",
        "unit": "%",
        "order": 15,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 36,
        "name": "damp",
        "paramId": "poly/reverb/damp",
        "minimum": 0,
        "maximum": 100,
        "exponent": 1,
        "steps": 0,
        "initialValue": 20,
        "isEnum": false,
        "enumValues": [],
        "displayName": "Damp",
        "unit": "%",
        "order": 5,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 37,
        "name": "decay",
        "paramId": "poly/reverb/decay",
        "minimum": 0,
        "maximum": 100,
        "exponent": 1,
        "steps": 0,
        "initialValue": 10,
        "isEnum": false,
        "enumValues": [],
        "displayName": "Decay",
        "unit": "%",
        "order": 1,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 38,
        "name": "pitchvol",
        "paramId": "poly/reverb/pitchvol",
        "minimum": 0,
        "maximum": 100,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "PitchVol",
        "unit": "%",
        "order": 12,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 39,
        "name": "revvol",
        "paramId": "poly/reverb/revvol",
        "minimum": 0,
        "maximum": 100,
        "exponent": 1,
        "steps": 0,
        "initialValue": 100,
        "isEnum": false,
        "enumValues": [],
        "displayName": "RevVol",
        "unit": "%",
        "order": 11,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 40,
        "name": "jitter",
        "paramId": "poly/reverb/jitter",
        "minimum": 0,
        "maximum": 100,
        "exponent": 1,
        "steps": 0,
        "initialValue": 50,
        "isEnum": false,
        "enumValues": [],
        "displayName": "Jitter",
        "unit": "%",
        "order": 4,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 41,
        "name": "size",
        "paramId": "poly/reverb/size",
        "minimum": 0,
        "maximum": 100,
        "exponent": 1,
        "steps": 0,
        "initialValue": 10,
        "isEnum": false,
        "enumValues": [],
        "displayName": "Size",
        "unit": "%",
        "order": 2,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 42,
        "name": "diff",
        "paramId": "poly/reverb/diff",
        "minimum": 0,
        "maximum": 100,
        "exponent": 1,
        "steps": 0,
        "initialValue": 50,
        "isEnum": false,
        "enumValues": [],
        "displayName": "Diff",
        "unit": "%",
        "order": 3,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 43,
        "name": "pitch",
        "paramId": "poly/reverb/pitch",
        "minimum": -24,
        "maximum": 24,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "Pitch",
        "unit": "st",
        "order": 6,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 44,
        "name": "chorus",
        "paramId": "poly/reverb/chorus",
        "minimum": 0,
        "maximum": 100,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "Chorus",
        "unit": "%",
        "order": 10,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 45,
        "name": "feedback",
        "paramId": "poly/reverb/feedback",
        "minimum": 0,
        "maximum": 100,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "Feedback",
        "unit": "%",
        "order": 9,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 46,
        "name": "window",
        "paramId": "poly/reverb/window",
        "minimum": 25,
        "maximum": 250,
        "exponent": 1,
        "steps": 0,
        "initialValue": 125,
        "isEnum": false,
        "enumValues": [],
        "displayName": "Window",
        "unit": "ms",
        "order": 7,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 47,
        "name": "delay",
        "paramId": "poly/reverb/delay",
        "minimum": 0,
        "maximum": 1000,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "Delay",
        "unit": "ms",
        "order": 8,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 48,
        "name": "dest",
        "paramId": "poly/lfo1/dest",
        "minimum": 0,
        "maximum": 3,
        "exponent": 1,
        "steps": 4,
        "initialValue": 0,
        "isEnum": true,
        "enumValues": [
          "none",
          "osc_freq",
          "filter1_freq",
          "filter2_freq"
        ],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 49,
        "name": "freq",
        "paramId": "poly/lfo1/freq",
        "minimum": 0,
        "maximum": 20,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 50,
        "name": "rate",
        "paramId": "poly/trem/rate",
        "minimum": 0,
        "maximum": 100,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "Rate",
        "unit": "%",
        "order": 1,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 51,
        "name": "depth",
        "paramId": "poly/trem/depth",
        "minimum": 0,
        "maximum": 100,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "Depth",
        "unit": "%",
        "order": 2,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 52,
        "name": "spread",
        "paramId": "poly/trem/spread",
        "minimum": 0,
        "maximum": 100,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "Spread",
        "unit": "%",
        "order": 3,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 53,
        "name": "dest",
        "paramId": "poly/lfo2/dest",
        "minimum": 0,
        "maximum": 3,
        "exponent": 1,
        "steps": 4,
        "initialValue": 0,
        "isEnum": true,
        "enumValues": [
          "none",
          "osc_freq",
          "filter1_freq",
          "filter2_freq"
        ],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 54,
        "name": "freq",
        "paramId": "poly/lfo2/freq",
        "minimum": 0,
        "maximum": 20,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      }
    ],
    "numParameters": 55,
    "numSignalInParameters": 0,
    "numSignalOutParameters": 0,
    "numInputChannels": 0,
    "numOutputChannels": 2,
    "numMidiInputPorts": 1,
    "numMidiOutputPorts": 1,
    "externalDataRefs": [],
    "patcherSerial": 0,
    "inports": [
      {
        "tag": "tap-tempo",
        "meta": ""
      },
      {
        "tag": "tap-mult",
        "meta": ""
      },
      {
        "tag": "lfo-mode",
        "meta": ""
      }
    ],
    "outports": [],
    "inlets": [
      {
        "type": "midi"
      }
    ],
    "outlets": [
      {
        "type": "signal",
        "index": 1,
        "tag": "out1",
        "meta": ""
      },
      {
        "type": "signal",
        "index": 2,
        "tag": "out2",
        "meta": ""
      },
      {
        "type": "midi"
      }
    ],
    "paramConversion": {
      "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
      "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.poly[0].getNumParameters()) {\n            {\n                return this.poly[0].convertToNormalizedParameterValue(index, value);\n            }\n        }\n\n        return value;\n    }\n}",
      "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.poly[0].getNumParameters()) {\n            {\n                return this.poly[0].convertFromNormalizedParameterValue(index, value);\n            }\n        }\n\n        return value;\n    }\n}",
      "getNumParameters": "function getNumParameters() {\n    return 0 + this.poly[0].getNumParameters();\n}",
      "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.poly[0].getNumParameters()) {\n            {\n                return this.poly[0].constrainParameterValue(index, value);\n            }\n        }\n\n        return value;\n    }\n}",
      "subpatches": {
        "poly": {
          "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
          "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_32.getNumParameters())\n            return this.p_32.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_32.getNumParameters();\n\n        if (index < this.p_33.getNumParameters())\n            return this.p_33.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_33.getNumParameters();\n\n        if (index < this.p_34.getNumParameters())\n            return this.p_34.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_34.getNumParameters();\n\n        if (index < this.p_35.getNumParameters())\n            return this.p_35.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_35.getNumParameters();\n\n        if (index < this.p_36.getNumParameters())\n            return this.p_36.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_36.getNumParameters();\n\n        if (index < this.p_37.getNumParameters())\n            return this.p_37.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_37.getNumParameters();\n\n        if (index < this.p_38.getNumParameters())\n            return this.p_38.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_38.getNumParameters();\n\n        if (index < this.p_39.getNumParameters())\n            return this.p_39.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_39.getNumParameters();\n\n        if (index < this.p_40.getNumParameters())\n            return this.p_40.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_40.getNumParameters();\n\n        if (index < this.p_41.getNumParameters())\n            return this.p_41.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_41.getNumParameters();\n\n        if (index < this.p_42.getNumParameters())\n            return this.p_42.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_42.getNumParameters();\n\n        if (index < this.p_43.getNumParameters())\n            return this.p_43.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_43.getNumParameters();\n\n        if (index < this.p_44.getNumParameters())\n            return this.p_44.convertToNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
          "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_32.getNumParameters())\n            return this.p_32.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_32.getNumParameters();\n\n        if (index < this.p_33.getNumParameters())\n            return this.p_33.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_33.getNumParameters();\n\n        if (index < this.p_34.getNumParameters())\n            return this.p_34.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_34.getNumParameters();\n\n        if (index < this.p_35.getNumParameters())\n            return this.p_35.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_35.getNumParameters();\n\n        if (index < this.p_36.getNumParameters())\n            return this.p_36.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_36.getNumParameters();\n\n        if (index < this.p_37.getNumParameters())\n            return this.p_37.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_37.getNumParameters();\n\n        if (index < this.p_38.getNumParameters())\n            return this.p_38.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_38.getNumParameters();\n\n        if (index < this.p_39.getNumParameters())\n            return this.p_39.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_39.getNumParameters();\n\n        if (index < this.p_40.getNumParameters())\n            return this.p_40.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_40.getNumParameters();\n\n        if (index < this.p_41.getNumParameters())\n            return this.p_41.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_41.getNumParameters();\n\n        if (index < this.p_42.getNumParameters())\n            return this.p_42.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_42.getNumParameters();\n\n        if (index < this.p_43.getNumParameters())\n            return this.p_43.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_43.getNumParameters();\n\n        if (index < this.p_44.getNumParameters())\n            return this.p_44.convertFromNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
          "getNumParameters": "function getNumParameters() {\n    return 0 + this.p_32.getNumParameters() + this.p_33.getNumParameters() + this.p_34.getNumParameters() + this.p_35.getNumParameters() + this.p_36.getNumParameters() + this.p_37.getNumParameters() + this.p_38.getNumParameters() + this.p_39.getNumParameters() + this.p_40.getNumParameters() + this.p_41.getNumParameters() + this.p_42.getNumParameters() + this.p_43.getNumParameters() + this.p_44.getNumParameters();\n}",
          "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_32.getNumParameters())\n            return this.p_32.constrainParameterValue(index, value);\n\n        index -= this.p_32.getNumParameters();\n\n        if (index < this.p_33.getNumParameters())\n            return this.p_33.constrainParameterValue(index, value);\n\n        index -= this.p_33.getNumParameters();\n\n        if (index < this.p_34.getNumParameters())\n            return this.p_34.constrainParameterValue(index, value);\n\n        index -= this.p_34.getNumParameters();\n\n        if (index < this.p_35.getNumParameters())\n            return this.p_35.constrainParameterValue(index, value);\n\n        index -= this.p_35.getNumParameters();\n\n        if (index < this.p_36.getNumParameters())\n            return this.p_36.constrainParameterValue(index, value);\n\n        index -= this.p_36.getNumParameters();\n\n        if (index < this.p_37.getNumParameters())\n            return this.p_37.constrainParameterValue(index, value);\n\n        index -= this.p_37.getNumParameters();\n\n        if (index < this.p_38.getNumParameters())\n            return this.p_38.constrainParameterValue(index, value);\n\n        index -= this.p_38.getNumParameters();\n\n        if (index < this.p_39.getNumParameters())\n            return this.p_39.constrainParameterValue(index, value);\n\n        index -= this.p_39.getNumParameters();\n\n        if (index < this.p_40.getNumParameters())\n            return this.p_40.constrainParameterValue(index, value);\n\n        index -= this.p_40.getNumParameters();\n\n        if (index < this.p_41.getNumParameters())\n            return this.p_41.constrainParameterValue(index, value);\n\n        index -= this.p_41.getNumParameters();\n\n        if (index < this.p_42.getNumParameters())\n            return this.p_42.constrainParameterValue(index, value);\n\n        index -= this.p_42.getNumParameters();\n\n        if (index < this.p_43.getNumParameters())\n            return this.p_43.constrainParameterValue(index, value);\n\n        index -= this.p_43.getNumParameters();\n\n        if (index < this.p_44.getNumParameters())\n            return this.p_44.constrainParameterValue(index, value);\n\n        return value;\n    }\n}",
          "subpatches": {
            "p_32": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    case 0:\n        {\n            value = (value < 0 ? 0 : (value > 4 ? 4 : value));\n            let normalizedValue = (value - 0) / (4 - 0);\n\n            {\n                normalizedValue = this.applyStepsToNormalizedParameterValue(normalizedValue, 5);\n            }\n\n            return normalizedValue;\n        }\n    case 1:\n        {\n            value = (value < 0 ? 0 : (value > 0.5 ? 0.5 : value));\n            let normalizedValue = (value - 0) / (0.5 - 0);\n            return normalizedValue;\n        }\n    default:\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    case 0:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                value = this.applyStepsToNormalizedParameterValue(value, 5);\n            }\n\n            {\n                return 0 + value * (4 - 0);\n            }\n        }\n    case 1:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                return 0 + value * (0.5 - 0);\n            }\n        }\n    default:\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 2;\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    case 0:\n        {\n            v = (v > 4 ? 4 : (v < 0 ? 0 : v));\n\n            {\n                const oneStep = 4 / 4;\n                const oneStepInv = (oneStep != 0 ? 1 / oneStep : 0);\n                const numberOfSteps = rnbo_fround(v * oneStepInv * 1 / 1) * 1;\n                v = numberOfSteps * oneStep;\n            }\n\n            return v;\n        }\n    case 1:\n        {\n            v = (v > 0.5 ? 0.5 : (v < 0 ? 0 : v));\n            return v;\n        }\n    default:\n        return value;\n    }\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_33": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    case 0:\n        {\n            value = (value < 0 ? 0 : (value > 4 ? 4 : value));\n            let normalizedValue = (value - 0) / (4 - 0);\n\n            {\n                normalizedValue = this.applyStepsToNormalizedParameterValue(normalizedValue, 5);\n            }\n\n            return normalizedValue;\n        }\n    case 1:\n        {\n            value = (value < 0 ? 0 : (value > 0.5 ? 0.5 : value));\n            let normalizedValue = (value - 0) / (0.5 - 0);\n            return normalizedValue;\n        }\n    default:\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    case 0:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                value = this.applyStepsToNormalizedParameterValue(value, 5);\n            }\n\n            {\n                return 0 + value * (4 - 0);\n            }\n        }\n    case 1:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                return 0 + value * (0.5 - 0);\n            }\n        }\n    default:\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 2;\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    case 0:\n        {\n            v = (v > 4 ? 4 : (v < 0 ? 0 : v));\n\n            {\n                const oneStep = 4 / 4;\n                const oneStepInv = (oneStep != 0 ? 1 / oneStep : 0);\n                const numberOfSteps = rnbo_fround(v * oneStepInv * 1 / 1) * 1;\n                v = numberOfSteps * oneStep;\n            }\n\n            return v;\n        }\n    case 1:\n        {\n            v = (v > 0.5 ? 0.5 : (v < 0 ? 0 : v));\n            return v;\n        }\n    default:\n        return value;\n    }\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_34": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    case 2:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n            let normalizedValue = (value - 0) / (1 - 0);\n            return normalizedValue;\n        }\n    case 0:\n        {\n            value = (value < 0 ? 0 : (value > 4 ? 4 : value));\n            let normalizedValue = (value - 0) / (4 - 0);\n\n            {\n                normalizedValue = this.applyStepsToNormalizedParameterValue(normalizedValue, 5);\n            }\n\n            return normalizedValue;\n        }\n    case 1:\n        {\n            value = (value < 0 ? 0 : (value > 5000 ? 5000 : value));\n            let normalizedValue = (value - 0) / (5000 - 0);\n            return normalizedValue;\n        }\n    default:\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    case 2:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                return 0 + value * (1 - 0);\n            }\n        }\n    case 0:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                value = this.applyStepsToNormalizedParameterValue(value, 5);\n            }\n\n            {\n                return 0 + value * (4 - 0);\n            }\n        }\n    case 1:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                return 0 + value * (5000 - 0);\n            }\n        }\n    default:\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 3;\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    case 0:\n        {\n            v = (v > 4 ? 4 : (v < 0 ? 0 : v));\n\n            {\n                const oneStep = 4 / 4;\n                const oneStepInv = (oneStep != 0 ? 1 / oneStep : 0);\n                const numberOfSteps = rnbo_fround(v * oneStepInv * 1 / 1) * 1;\n                v = numberOfSteps * oneStep;\n            }\n\n            return v;\n        }\n    case 1:\n        {\n            v = (v > 5000 ? 5000 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 2:\n        {\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\n            return v;\n        }\n    default:\n        return value;\n    }\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_35": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    case 2:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n            let normalizedValue = (value - 0) / (1 - 0);\n            return normalizedValue;\n        }\n    case 0:\n        {\n            value = (value < 0 ? 0 : (value > 4 ? 4 : value));\n            let normalizedValue = (value - 0) / (4 - 0);\n\n            {\n                normalizedValue = this.applyStepsToNormalizedParameterValue(normalizedValue, 5);\n            }\n\n            return normalizedValue;\n        }\n    case 1:\n        {\n            value = (value < 0 ? 0 : (value > 5000 ? 5000 : value));\n            let normalizedValue = (value - 0) / (5000 - 0);\n            return normalizedValue;\n        }\n    default:\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    case 2:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                return 0 + value * (1 - 0);\n            }\n        }\n    case 0:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                value = this.applyStepsToNormalizedParameterValue(value, 5);\n            }\n\n            {\n                return 0 + value * (4 - 0);\n            }\n        }\n    case 1:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                return 0 + value * (5000 - 0);\n            }\n        }\n    default:\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 3;\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    case 0:\n        {\n            v = (v > 4 ? 4 : (v < 0 ? 0 : v));\n\n            {\n                const oneStep = 4 / 4;\n                const oneStepInv = (oneStep != 0 ? 1 / oneStep : 0);\n                const numberOfSteps = rnbo_fround(v * oneStepInv * 1 / 1) * 1;\n                v = numberOfSteps * oneStep;\n            }\n\n            return v;\n        }\n    case 1:\n        {\n            v = (v > 5000 ? 5000 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 2:\n        {\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\n            return v;\n        }\n    default:\n        return value;\n    }\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_36": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    case 0:\n        {\n            value = (value < 0 ? 0 : (value > 4 ? 4 : value));\n            let normalizedValue = (value - 0) / (4 - 0);\n\n            {\n                normalizedValue = this.applyStepsToNormalizedParameterValue(normalizedValue, 5);\n            }\n\n            return normalizedValue;\n        }\n    case 1:\n        {\n            value = (value < 0 ? 0 : (value > 0.5 ? 0.5 : value));\n            let normalizedValue = (value - 0) / (0.5 - 0);\n            return normalizedValue;\n        }\n    default:\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    case 0:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                value = this.applyStepsToNormalizedParameterValue(value, 5);\n            }\n\n            {\n                return 0 + value * (4 - 0);\n            }\n        }\n    case 1:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                return 0 + value * (0.5 - 0);\n            }\n        }\n    default:\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 2;\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    case 0:\n        {\n            v = (v > 4 ? 4 : (v < 0 ? 0 : v));\n\n            {\n                const oneStep = 4 / 4;\n                const oneStepInv = (oneStep != 0 ? 1 / oneStep : 0);\n                const numberOfSteps = rnbo_fround(v * oneStepInv * 1 / 1) * 1;\n                v = numberOfSteps * oneStep;\n            }\n\n            return v;\n        }\n    case 1:\n        {\n            v = (v > 0.5 ? 0.5 : (v < 0 ? 0 : v));\n            return v;\n        }\n    default:\n        return value;\n    }\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_37": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    case 1:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n            let normalizedValue = (value - 0) / (1 - 0);\n            return normalizedValue;\n        }\n    case 3:\n        {\n            value = (value < 0 ? 0 : (value > 500 ? 500 : value));\n            let normalizedValue = (value - 0) / (500 - 0);\n            return normalizedValue;\n        }\n    case 2:\n        {\n            value = (value < 0 ? 0 : (value > 0.999 ? 0.999 : value));\n            let normalizedValue = (value - 0) / (0.999 - 0);\n            return normalizedValue;\n        }\n    case 0:\n        {\n            value = (value < 1 ? 1 : (value > 2000 ? 2000 : value));\n            let normalizedValue = (value - 1) / (2000 - 1);\n            return normalizedValue;\n        }\n    default:\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    case 1:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                return 0 + value * (1 - 0);\n            }\n        }\n    case 3:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                return 0 + value * (500 - 0);\n            }\n        }\n    case 2:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                return 0 + value * (0.999 - 0);\n            }\n        }\n    case 0:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                return 1 + value * (2000 - 1);\n            }\n        }\n    default:\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 4;\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    case 0:\n        {\n            v = (v > 2000 ? 2000 : (v < 1 ? 1 : v));\n            return v;\n        }\n    case 1:\n        {\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 2:\n        {\n            v = (v > 0.999 ? 0.999 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 3:\n        {\n            v = (v > 500 ? 500 : (v < 0 ? 0 : v));\n            return v;\n        }\n    default:\n        return value;\n    }\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_38": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    case 2:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n            let normalizedValue = (value - 0) / (1 - 0);\n            return normalizedValue;\n        }\n    case 0:\n    case 1:\n    case 3:\n        {\n            value = (value < 0 ? 0 : (value > 2000 ? 2000 : value));\n            let normalizedValue = (value - 0) / (2000 - 0);\n            return normalizedValue;\n        }\n    default:\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    case 2:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                return 0 + value * (1 - 0);\n            }\n        }\n    case 0:\n    case 1:\n    case 3:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                return 0 + value * (2000 - 0);\n            }\n        }\n    default:\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 4;\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    case 0:\n        {\n            v = (v > 2000 ? 2000 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 1:\n        {\n            v = (v > 2000 ? 2000 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 2:\n        {\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 3:\n        {\n            v = (v > 2000 ? 2000 : (v < 0 ? 0 : v));\n            return v;\n        }\n    default:\n        return value;\n    }\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_39": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    case 0:\n    case 1:\n    case 2:\n    case 3:\n        {\n            value = (value < 0 ? 0 : (value > 100 ? 100 : value));\n            let normalizedValue = (value - 0) / (100 - 0);\n            return normalizedValue;\n        }\n    case 4:\n        {\n            value = (value < -100 ? -100 : (value > 75 ? 75 : value));\n            let normalizedValue = (value - -100) / (75 - -100);\n            return normalizedValue;\n        }\n    case 5:\n    case 6:\n    case 7:\n    case 8:\n        {\n            value = (value < -100 ? -100 : (value > 100 ? 100 : value));\n            let normalizedValue = (value - -100) / (100 - -100);\n            return normalizedValue;\n        }\n    default:\n        index -= 9;\n\n        if (index < this.p_04.getNumParameters())\n            return this.p_04.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_04.getNumParameters();\n\n        if (index < this.p_05.getNumParameters())\n            return this.p_05.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_05.getNumParameters();\n\n        if (index < this.p_06.getNumParameters())\n            return this.p_06.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_06.getNumParameters();\n\n        if (index < this.p_07.getNumParameters())\n            return this.p_07.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_07.getNumParameters();\n\n        if (index < this.p_08.getNumParameters())\n            return this.p_08.convertToNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    case 0:\n    case 1:\n    case 2:\n    case 3:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                return 0 + value * (100 - 0);\n            }\n        }\n    case 4:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                return -100 + value * (75 - -100);\n            }\n        }\n    case 5:\n    case 6:\n    case 7:\n    case 8:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                return -100 + value * (100 - -100);\n            }\n        }\n    default:\n        index -= 9;\n\n        if (index < this.p_04.getNumParameters())\n            return this.p_04.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_04.getNumParameters();\n\n        if (index < this.p_05.getNumParameters())\n            return this.p_05.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_05.getNumParameters();\n\n        if (index < this.p_06.getNumParameters())\n            return this.p_06.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_06.getNumParameters();\n\n        if (index < this.p_07.getNumParameters())\n            return this.p_07.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_07.getNumParameters();\n\n        if (index < this.p_08.getNumParameters())\n            return this.p_08.convertFromNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 9 + this.p_04.getNumParameters() + this.p_05.getNumParameters() + this.p_06.getNumParameters() + this.p_07.getNumParameters() + this.p_08.getNumParameters();\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    case 0:\n        {\n            v = (v > 100 ? 100 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 1:\n        {\n            v = (v > 100 ? 100 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 2:\n        {\n            v = (v > 100 ? 100 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 3:\n        {\n            v = (v > 100 ? 100 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 4:\n        {\n            v = (v > 75 ? 75 : (v < -100 ? -100 : v));\n            return v;\n        }\n    case 5:\n        {\n            v = (v > 100 ? 100 : (v < -100 ? -100 : v));\n            return v;\n        }\n    case 6:\n        {\n            v = (v > 100 ? 100 : (v < -100 ? -100 : v));\n            return v;\n        }\n    case 7:\n        {\n            v = (v > 100 ? 100 : (v < -100 ? -100 : v));\n            return v;\n        }\n    case 8:\n        {\n            v = (v > 100 ? 100 : (v < -100 ? -100 : v));\n            return v;\n        }\n    default:\n        index -= 9;\n\n        if (index < this.p_04.getNumParameters())\n            return this.p_04.constrainParameterValue(index, value);\n\n        index -= this.p_04.getNumParameters();\n\n        if (index < this.p_05.getNumParameters())\n            return this.p_05.constrainParameterValue(index, value);\n\n        index -= this.p_05.getNumParameters();\n\n        if (index < this.p_06.getNumParameters())\n            return this.p_06.constrainParameterValue(index, value);\n\n        index -= this.p_06.getNumParameters();\n\n        if (index < this.p_07.getNumParameters())\n            return this.p_07.constrainParameterValue(index, value);\n\n        index -= this.p_07.getNumParameters();\n\n        if (index < this.p_08.getNumParameters())\n            return this.p_08.constrainParameterValue(index, value);\n\n        return value;\n    }\n}",
              "subpatches": {
                "p_04": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                },
                "p_05": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                },
                "p_06": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                },
                "p_07": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_01.getNumParameters())\n            return this.p_01.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_01.getNumParameters();\n\n        if (index < this.p_02.getNumParameters())\n            return this.p_02.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_02.getNumParameters();\n\n        if (index < this.p_03.getNumParameters())\n            return this.p_03.convertToNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_01.getNumParameters())\n            return this.p_01.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_01.getNumParameters();\n\n        if (index < this.p_02.getNumParameters())\n            return this.p_02.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_02.getNumParameters();\n\n        if (index < this.p_03.getNumParameters())\n            return this.p_03.convertFromNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
                  "getNumParameters": "function getNumParameters() {\n    return 0 + this.p_01.getNumParameters() + this.p_02.getNumParameters() + this.p_03.getNumParameters();\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_01.getNumParameters())\n            return this.p_01.constrainParameterValue(index, value);\n\n        index -= this.p_01.getNumParameters();\n\n        if (index < this.p_02.getNumParameters())\n            return this.p_02.constrainParameterValue(index, value);\n\n        index -= this.p_02.getNumParameters();\n\n        if (index < this.p_03.getNumParameters())\n            return this.p_03.constrainParameterValue(index, value);\n\n        return value;\n    }\n}",
                  "subpatches": {
                    "p_01": {
                      "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                      "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                      "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                      "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                      "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                      "subpatches": {},
                      "isPolyphonic": false
                    },
                    "p_02": {
                      "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                      "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                      "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                      "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                      "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                      "subpatches": {},
                      "isPolyphonic": false
                    },
                    "p_03": {
                      "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                      "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                      "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                      "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                      "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                      "subpatches": {},
                      "isPolyphonic": false
                    }
                  },
                  "isPolyphonic": false
                },
                "p_08": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                }
              },
              "isPolyphonic": false
            },
            "p_40": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    case 1:\n    case 3:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n            let normalizedValue = (value - 0) / (1 - 0);\n            return normalizedValue;\n        }\n    case 0:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n            let normalizedValue = (value - 0) / (1 - 0);\n\n            {\n                normalizedValue = this.applyStepsToNormalizedParameterValue(normalizedValue, 2);\n            }\n\n            return normalizedValue;\n        }\n    case 2:\n        {\n            value = (value < 1 ? 1 : (value > 1000 ? 1000 : value));\n            let normalizedValue = (value - 1) / (1000 - 1);\n            return normalizedValue;\n        }\n    default:\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    case 1:\n    case 3:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                return 0 + value * (1 - 0);\n            }\n        }\n    case 0:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                value = this.applyStepsToNormalizedParameterValue(value, 2);\n            }\n\n            {\n                return 0 + value * (1 - 0);\n            }\n        }\n    case 2:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                return 1 + value * (1000 - 1);\n            }\n        }\n    default:\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 4;\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    case 0:\n        {\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\n\n            {\n                const oneStep = 1 / 1;\n                const oneStepInv = (oneStep != 0 ? 1 / oneStep : 0);\n                const numberOfSteps = rnbo_fround(v * oneStepInv * 1 / 1) * 1;\n                v = numberOfSteps * oneStep;\n            }\n\n            return v;\n        }\n    case 1:\n        {\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 2:\n        {\n            v = (v > 1000 ? 1000 : (v < 1 ? 1 : v));\n            return v;\n        }\n    case 3:\n        {\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\n            return v;\n        }\n    default:\n        return value;\n    }\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_41": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    case 0:\n    case 1:\n    case 2:\n    case 3:\n    case 4:\n    case 5:\n    case 6:\n    case 7:\n    case 8:\n    case 9:\n    case 11:\n    case 12:\n        {\n            value = (value < 0 ? 0 : (value > 100 ? 100 : value));\n            let normalizedValue = (value - 0) / (100 - 0);\n            return normalizedValue;\n        }\n    case 14:\n        {\n            value = (value < 0 ? 0 : (value > 1000 ? 1000 : value));\n            let normalizedValue = (value - 0) / (1000 - 0);\n            return normalizedValue;\n        }\n    case 13:\n        {\n            value = (value < 25 ? 25 : (value > 250 ? 250 : value));\n            let normalizedValue = (value - 25) / (250 - 25);\n            return normalizedValue;\n        }\n    case 10:\n        {\n            value = (value < -24 ? -24 : (value > 24 ? 24 : value));\n            let normalizedValue = (value - -24) / (24 - -24);\n            return normalizedValue;\n        }\n    default:\n        index -= 15;\n\n        if (index < this.p_22.getNumParameters())\n            return this.p_22.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_22.getNumParameters();\n\n        if (index < this.p_23.getNumParameters())\n            return this.p_23.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_23.getNumParameters();\n\n        if (index < this.p_24.getNumParameters())\n            return this.p_24.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_24.getNumParameters();\n\n        if (index < this.p_25.getNumParameters())\n            return this.p_25.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_25.getNumParameters();\n\n        if (index < this.p_26.getNumParameters())\n            return this.p_26.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_26.getNumParameters();\n\n        if (index < this.p_27.getNumParameters())\n            return this.p_27.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_27.getNumParameters();\n\n        if (index < this.p_28.getNumParameters())\n            return this.p_28.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_28.getNumParameters();\n\n        if (index < this.p_29.getNumParameters())\n            return this.p_29.convertToNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    case 0:\n    case 1:\n    case 2:\n    case 3:\n    case 4:\n    case 5:\n    case 6:\n    case 7:\n    case 8:\n    case 9:\n    case 11:\n    case 12:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                return 0 + value * (100 - 0);\n            }\n        }\n    case 14:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                return 0 + value * (1000 - 0);\n            }\n        }\n    case 13:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                return 25 + value * (250 - 25);\n            }\n        }\n    case 10:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                return -24 + value * (24 - -24);\n            }\n        }\n    default:\n        index -= 15;\n\n        if (index < this.p_22.getNumParameters())\n            return this.p_22.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_22.getNumParameters();\n\n        if (index < this.p_23.getNumParameters())\n            return this.p_23.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_23.getNumParameters();\n\n        if (index < this.p_24.getNumParameters())\n            return this.p_24.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_24.getNumParameters();\n\n        if (index < this.p_25.getNumParameters())\n            return this.p_25.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_25.getNumParameters();\n\n        if (index < this.p_26.getNumParameters())\n            return this.p_26.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_26.getNumParameters();\n\n        if (index < this.p_27.getNumParameters())\n            return this.p_27.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_27.getNumParameters();\n\n        if (index < this.p_28.getNumParameters())\n            return this.p_28.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_28.getNumParameters();\n\n        if (index < this.p_29.getNumParameters())\n            return this.p_29.convertFromNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 15 + this.p_22.getNumParameters() + this.p_23.getNumParameters() + this.p_24.getNumParameters() + this.p_25.getNumParameters() + this.p_26.getNumParameters() + this.p_27.getNumParameters() + this.p_28.getNumParameters() + this.p_29.getNumParameters();\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    case 0:\n        {\n            v = (v > 100 ? 100 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 1:\n        {\n            v = (v > 100 ? 100 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 2:\n        {\n            v = (v > 100 ? 100 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 3:\n        {\n            v = (v > 100 ? 100 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 4:\n        {\n            v = (v > 100 ? 100 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 5:\n        {\n            v = (v > 100 ? 100 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 6:\n        {\n            v = (v > 100 ? 100 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 7:\n        {\n            v = (v > 100 ? 100 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 8:\n        {\n            v = (v > 100 ? 100 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 9:\n        {\n            v = (v > 100 ? 100 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 10:\n        {\n            v = (v > 24 ? 24 : (v < -24 ? -24 : v));\n            return v;\n        }\n    case 11:\n        {\n            v = (v > 100 ? 100 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 12:\n        {\n            v = (v > 100 ? 100 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 13:\n        {\n            v = (v > 250 ? 250 : (v < 25 ? 25 : v));\n            return v;\n        }\n    case 14:\n        {\n            v = (v > 1000 ? 1000 : (v < 0 ? 0 : v));\n            return v;\n        }\n    default:\n        index -= 15;\n\n        if (index < this.p_22.getNumParameters())\n            return this.p_22.constrainParameterValue(index, value);\n\n        index -= this.p_22.getNumParameters();\n\n        if (index < this.p_23.getNumParameters())\n            return this.p_23.constrainParameterValue(index, value);\n\n        index -= this.p_23.getNumParameters();\n\n        if (index < this.p_24.getNumParameters())\n            return this.p_24.constrainParameterValue(index, value);\n\n        index -= this.p_24.getNumParameters();\n\n        if (index < this.p_25.getNumParameters())\n            return this.p_25.constrainParameterValue(index, value);\n\n        index -= this.p_25.getNumParameters();\n\n        if (index < this.p_26.getNumParameters())\n            return this.p_26.constrainParameterValue(index, value);\n\n        index -= this.p_26.getNumParameters();\n\n        if (index < this.p_27.getNumParameters())\n            return this.p_27.constrainParameterValue(index, value);\n\n        index -= this.p_27.getNumParameters();\n\n        if (index < this.p_28.getNumParameters())\n            return this.p_28.constrainParameterValue(index, value);\n\n        index -= this.p_28.getNumParameters();\n\n        if (index < this.p_29.getNumParameters())\n            return this.p_29.constrainParameterValue(index, value);\n\n        return value;\n    }\n}",
              "subpatches": {
                "p_22": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_09.getNumParameters())\n            return this.p_09.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_09.getNumParameters();\n\n        if (index < this.p_10.getNumParameters())\n            return this.p_10.convertToNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_09.getNumParameters())\n            return this.p_09.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_09.getNumParameters();\n\n        if (index < this.p_10.getNumParameters())\n            return this.p_10.convertFromNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
                  "getNumParameters": "function getNumParameters() {\n    return 0 + this.p_09.getNumParameters() + this.p_10.getNumParameters();\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_09.getNumParameters())\n            return this.p_09.constrainParameterValue(index, value);\n\n        index -= this.p_09.getNumParameters();\n\n        if (index < this.p_10.getNumParameters())\n            return this.p_10.constrainParameterValue(index, value);\n\n        return value;\n    }\n}",
                  "subpatches": {
                    "p_09": {
                      "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                      "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                      "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                      "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                      "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                      "subpatches": {},
                      "isPolyphonic": false
                    },
                    "p_10": {
                      "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                      "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                      "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                      "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                      "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                      "subpatches": {},
                      "isPolyphonic": false
                    }
                  },
                  "isPolyphonic": false
                },
                "p_23": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                },
                "p_24": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                },
                "p_25": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_11.getNumParameters())\n            return this.p_11.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_11.getNumParameters();\n\n        if (index < this.p_12.getNumParameters())\n            return this.p_12.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_12.getNumParameters();\n\n        if (index < this.p_13.getNumParameters())\n            return this.p_13.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_13.getNumParameters();\n\n        if (index < this.p_14.getNumParameters())\n            return this.p_14.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_14.getNumParameters();\n\n        if (index < this.p_15.getNumParameters())\n            return this.p_15.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_15.getNumParameters();\n\n        if (index < this.p_16.getNumParameters())\n            return this.p_16.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_16.getNumParameters();\n\n        if (index < this.p_17.getNumParameters())\n            return this.p_17.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_17.getNumParameters();\n\n        if (index < this.p_18.getNumParameters())\n            return this.p_18.convertToNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_11.getNumParameters())\n            return this.p_11.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_11.getNumParameters();\n\n        if (index < this.p_12.getNumParameters())\n            return this.p_12.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_12.getNumParameters();\n\n        if (index < this.p_13.getNumParameters())\n            return this.p_13.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_13.getNumParameters();\n\n        if (index < this.p_14.getNumParameters())\n            return this.p_14.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_14.getNumParameters();\n\n        if (index < this.p_15.getNumParameters())\n            return this.p_15.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_15.getNumParameters();\n\n        if (index < this.p_16.getNumParameters())\n            return this.p_16.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_16.getNumParameters();\n\n        if (index < this.p_17.getNumParameters())\n            return this.p_17.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_17.getNumParameters();\n\n        if (index < this.p_18.getNumParameters())\n            return this.p_18.convertFromNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
                  "getNumParameters": "function getNumParameters() {\n    return 0 + this.p_11.getNumParameters() + this.p_12.getNumParameters() + this.p_13.getNumParameters() + this.p_14.getNumParameters() + this.p_15.getNumParameters() + this.p_16.getNumParameters() + this.p_17.getNumParameters() + this.p_18.getNumParameters();\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_11.getNumParameters())\n            return this.p_11.constrainParameterValue(index, value);\n\n        index -= this.p_11.getNumParameters();\n\n        if (index < this.p_12.getNumParameters())\n            return this.p_12.constrainParameterValue(index, value);\n\n        index -= this.p_12.getNumParameters();\n\n        if (index < this.p_13.getNumParameters())\n            return this.p_13.constrainParameterValue(index, value);\n\n        index -= this.p_13.getNumParameters();\n\n        if (index < this.p_14.getNumParameters())\n            return this.p_14.constrainParameterValue(index, value);\n\n        index -= this.p_14.getNumParameters();\n\n        if (index < this.p_15.getNumParameters())\n            return this.p_15.constrainParameterValue(index, value);\n\n        index -= this.p_15.getNumParameters();\n\n        if (index < this.p_16.getNumParameters())\n            return this.p_16.constrainParameterValue(index, value);\n\n        index -= this.p_16.getNumParameters();\n\n        if (index < this.p_17.getNumParameters())\n            return this.p_17.constrainParameterValue(index, value);\n\n        index -= this.p_17.getNumParameters();\n\n        if (index < this.p_18.getNumParameters())\n            return this.p_18.constrainParameterValue(index, value);\n\n        return value;\n    }\n}",
                  "subpatches": {
                    "p_11": {
                      "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                      "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                      "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                      "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                      "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                      "subpatches": {},
                      "isPolyphonic": false
                    },
                    "p_12": {
                      "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                      "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                      "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                      "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                      "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                      "subpatches": {},
                      "isPolyphonic": false
                    },
                    "p_13": {
                      "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                      "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                      "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                      "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                      "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                      "subpatches": {},
                      "isPolyphonic": false
                    },
                    "p_14": {
                      "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                      "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                      "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                      "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                      "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                      "subpatches": {},
                      "isPolyphonic": false
                    },
                    "p_15": {
                      "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                      "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                      "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                      "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                      "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                      "subpatches": {},
                      "isPolyphonic": false
                    },
                    "p_16": {
                      "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                      "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                      "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                      "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                      "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                      "subpatches": {},
                      "isPolyphonic": false
                    },
                    "p_17": {
                      "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                      "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                      "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                      "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                      "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                      "subpatches": {},
                      "isPolyphonic": false
                    },
                    "p_18": {
                      "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                      "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                      "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                      "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                      "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                      "subpatches": {},
                      "isPolyphonic": false
                    }
                  },
                  "isPolyphonic": false
                },
                "p_26": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                },
                "p_27": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_19.getNumParameters())\n            return this.p_19.convertToNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_19.getNumParameters())\n            return this.p_19.convertFromNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
                  "getNumParameters": "function getNumParameters() {\n    return 0 + this.p_19.getNumParameters();\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_19.getNumParameters())\n            return this.p_19.constrainParameterValue(index, value);\n\n        return value;\n    }\n}",
                  "subpatches": {
                    "p_19": {
                      "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                      "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                      "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                      "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                      "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                      "subpatches": {},
                      "isPolyphonic": false
                    }
                  },
                  "isPolyphonic": false
                },
                "p_28": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                },
                "p_29": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_20.getNumParameters())\n            return this.p_20.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_20.getNumParameters();\n\n        if (index < this.p_21.getNumParameters())\n            return this.p_21.convertToNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_20.getNumParameters())\n            return this.p_20.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_20.getNumParameters();\n\n        if (index < this.p_21.getNumParameters())\n            return this.p_21.convertFromNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
                  "getNumParameters": "function getNumParameters() {\n    return 0 + this.p_20.getNumParameters() + this.p_21.getNumParameters();\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        index -= 0;\n\n        if (index < this.p_20.getNumParameters())\n            return this.p_20.constrainParameterValue(index, value);\n\n        index -= this.p_20.getNumParameters();\n\n        if (index < this.p_21.getNumParameters())\n            return this.p_21.constrainParameterValue(index, value);\n\n        return value;\n    }\n}",
                  "subpatches": {
                    "p_20": {
                      "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                      "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                      "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                      "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                      "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                      "subpatches": {},
                      "isPolyphonic": false
                    },
                    "p_21": {
                      "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                      "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                      "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                      "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                      "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                      "subpatches": {},
                      "isPolyphonic": false
                    }
                  },
                  "isPolyphonic": false
                }
              },
              "isPolyphonic": false
            },
            "p_42": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    case 0:\n        {\n            value = (value < 0 ? 0 : (value > 3 ? 3 : value));\n            let normalizedValue = (value - 0) / (3 - 0);\n\n            {\n                normalizedValue = this.applyStepsToNormalizedParameterValue(normalizedValue, 4);\n            }\n\n            return normalizedValue;\n        }\n    case 1:\n        {\n            value = (value < 0 ? 0 : (value > 20 ? 20 : value));\n            let normalizedValue = (value - 0) / (20 - 0);\n            return normalizedValue;\n        }\n    default:\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    case 0:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                value = this.applyStepsToNormalizedParameterValue(value, 4);\n            }\n\n            {\n                return 0 + value * (3 - 0);\n            }\n        }\n    case 1:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                return 0 + value * (20 - 0);\n            }\n        }\n    default:\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 2;\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    case 0:\n        {\n            v = (v > 3 ? 3 : (v < 0 ? 0 : v));\n\n            {\n                const oneStep = 3 / 3;\n                const oneStepInv = (oneStep != 0 ? 1 / oneStep : 0);\n                const numberOfSteps = rnbo_fround(v * oneStepInv * 1 / 1) * 1;\n                v = numberOfSteps * oneStep;\n            }\n\n            return v;\n        }\n    case 1:\n        {\n            v = (v > 20 ? 20 : (v < 0 ? 0 : v));\n            return v;\n        }\n    default:\n        return value;\n    }\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_43": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    case 0:\n    case 1:\n    case 2:\n        {\n            value = (value < 0 ? 0 : (value > 100 ? 100 : value));\n            let normalizedValue = (value - 0) / (100 - 0);\n            return normalizedValue;\n        }\n    default:\n        index -= 3;\n\n        if (index < this.p_30.getNumParameters())\n            return this.p_30.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_30.getNumParameters();\n\n        if (index < this.p_31.getNumParameters())\n            return this.p_31.convertToNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    case 0:\n    case 1:\n    case 2:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                return 0 + value * (100 - 0);\n            }\n        }\n    default:\n        index -= 3;\n\n        if (index < this.p_30.getNumParameters())\n            return this.p_30.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_30.getNumParameters();\n\n        if (index < this.p_31.getNumParameters())\n            return this.p_31.convertFromNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 3 + this.p_30.getNumParameters() + this.p_31.getNumParameters();\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    case 0:\n        {\n            v = (v > 100 ? 100 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 1:\n        {\n            v = (v > 100 ? 100 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 2:\n        {\n            v = (v > 100 ? 100 : (v < 0 ? 0 : v));\n            return v;\n        }\n    default:\n        index -= 3;\n\n        if (index < this.p_30.getNumParameters())\n            return this.p_30.constrainParameterValue(index, value);\n\n        index -= this.p_30.getNumParameters();\n\n        if (index < this.p_31.getNumParameters())\n            return this.p_31.constrainParameterValue(index, value);\n\n        return value;\n    }\n}",
              "subpatches": {
                "p_30": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                },
                "p_31": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                }
              },
              "isPolyphonic": false
            },
            "p_44": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    case 0:\n        {\n            value = (value < 0 ? 0 : (value > 3 ? 3 : value));\n            let normalizedValue = (value - 0) / (3 - 0);\n\n            {\n                normalizedValue = this.applyStepsToNormalizedParameterValue(normalizedValue, 4);\n            }\n\n            return normalizedValue;\n        }\n    case 1:\n        {\n            value = (value < 0 ? 0 : (value > 20 ? 20 : value));\n            let normalizedValue = (value - 0) / (20 - 0);\n            return normalizedValue;\n        }\n    default:\n        return value;\n    }\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    case 0:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                value = this.applyStepsToNormalizedParameterValue(value, 4);\n            }\n\n            {\n                return 0 + value * (3 - 0);\n            }\n        }\n    case 1:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                return 0 + value * (20 - 0);\n            }\n        }\n    default:\n        return value;\n    }\n}",
              "getNumParameters": "function getNumParameters() {\n    return 2;\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    case 0:\n        {\n            v = (v > 3 ? 3 : (v < 0 ? 0 : v));\n\n            {\n                const oneStep = 3 / 3;\n                const oneStepInv = (oneStep != 0 ? 1 / oneStep : 0);\n                const numberOfSteps = rnbo_fround(v * oneStepInv * 1 / 1) * 1;\n                v = numberOfSteps * oneStep;\n            }\n\n            return v;\n        }\n    case 1:\n        {\n            v = (v > 20 ? 20 : (v < 0 ? 0 : v));\n            return v;\n        }\n    default:\n        return value;\n    }\n}",
              "subpatches": {},
              "isPolyphonic": false
            }
          },
          "isPolyphonic": true
        }
      },
      "isPolyphonic": false
    },
    "presetid": "rnbo",
    "meta": {
      "architecture": "x64",
      "filename": "kob.maxpat",
      "rnboobjname": "kob",
      "maxversion": "8.6.2",
      "rnboversion": "1.2.6",
      "name": "nusynth"
    }
  },
  "presets": [
    {
      "name": "nusynth",
      "preset": {
        "__sps": {
          "poly": [
            {
              "__sps": {
                "adsr": {
                  "attack": {
                    "value": 25
                  },
                  "delay": {
                    "value": 27.900000000000002
                  },
                  "release": {
                    "value": 118
                  },
                  "sustain": {
                    "value": 0.6
                  }
                },
                "delay": {
                  "feedback": {
                    "value": 0.2
                  },
                  "stereo-delay": {
                    "value": 72.4
                  },
                  "time": {
                    "value": 222
                  },
                  "wet": {
                    "value": 0.7
                  }
                },
                "filter1": {
                  "freq": {
                    "value": 1304
                  },
                  "q": {
                    "value": 0.09
                  },
                  "type": {
                    "value": 0
                  }
                },
                "filter2": {
                  "freq": {
                    "value": 925
                  },
                  "q": {
                    "value": 0.7
                  },
                  "type": {
                    "value": 0
                  }
                },
                "fm": {
                  "fm": {
                    "value": 0
                  },
                  "freq": {
                    "value": 121
                  },
                  "index": {
                    "value": 0.37
                  },
                  "level": {
                    "value": 0.87
                  }
                },
                "lfo1": {
                  "dest": {
                    "value": 0
                  },
                  "freq": {
                    "value": 0
                  }
                },
                "lfo2": {
                  "dest": {
                    "value": 0
                  },
                  "freq": {
                    "value": 2.4
                  }
                },
                "osc1": {
                  "level": {
                    "value": 0.5
                  },
                  "waveform": {
                    "value": 2
                  }
                },
                "osc2": {
                  "level": {
                    "value": 0.5
                  },
                  "waveform": {
                    "value": 1
                  }
                },
                "osc3": {
                  "level": {
                    "value": 0.33
                  },
                  "waveform": {
                    "value": 0
                  }
                },
                "overdrive": {
                  "__sps": {
                    "Drive~": {},
                    "Mix~": {},
                    "Post-EQ~": {
                      "__sps": {
                        "Bass~": {},
                        "Mid~": {},
                        "Treble~": {}
                      }
                    },
                    "Pre-EQ~": {},
                    "Volume~": {}
                  },
                  "bass": {
                    "value": 48
                  },
                  "drive": {
                    "value": 0
                  },
                  "highcut": {
                    "value": 20.1
                  },
                  "lowcut": {
                    "value": 13
                  },
                  "mid": {
                    "value": 81
                  },
                  "midfreq": {
                    "value": 69
                  },
                  "mix": {
                    "value": 19
                  },
                  "treble": {
                    "value": 62
                  },
                  "volume": {
                    "value": 0
                  }
                },
                "reverb": {
                  "__sps": {
                    "Chorus~": {},
                    "Delay~": {},
                    "Feedback~": {
                      "__sps": {
                        "Gate~": {}
                      }
                    },
                    "Mix~": {},
                    "Octave~": {
                      "__sps": {
                        "Shift~": {},
                        "Shift~[1]": {}
                      }
                    },
                    "Pitch~": {
                      "__sps": {
                        "Shift~": {},
                        "Shift~[1]": {}
                      }
                    },
                    "Reverb~": {
                      "__sps": {
                        "Blur~": {},
                        "CombL~": {},
                        "CombR~": {},
                        "Damp~": {},
                        "MapParams": {},
                        "RoomA~": {},
                        "RoomB~": {},
                        "Shuffle~": {}
                      }
                    },
                    "Volumes~": {}
                  },
                  "chorus": {
                    "value": 0
                  },
                  "damp": {
                    "value": 27
                  },
                  "decay": {
                    "value": 53
                  },
                  "delay": {
                    "value": 0
                  },
                  "diff": {
                    "value": 43
                  },
                  "feedback": {
                    "value": 0
                  },
                  "jitter": {
                    "value": 76
                  },
                  "mix": {
                    "value": 0
                  },
                  "octdamp": {
                    "value": 0
                  },
                  "octvol": {
                    "value": 0
                  },
                  "pitch": {
                    "value": 0
                  },
                  "pitchvol": {
                    "value": 0
                  },
                  "revvol": {
                    "value": 100
                  },
                  "size": {
                    "value": 82
                  },
                  "window": {
                    "value": 36
                  }
                },
                "trem": {
                  "__sps": {
                    "LFO~": {},
                    "TapTempo": {}
                  },
                  "depth": {
                    "value": 0
                  },
                  "rate": {
                    "value": 0
                  },
                  "spread": {
                    "value": 0
                  }
                }
              }
            },
            {
              "__sps": {
                "adsr": {
                  "attack": {
                    "value": 25
                  },
                  "delay": {
                    "value": 27.900000000000002
                  },
                  "release": {
                    "value": 118
                  },
                  "sustain": {
                    "value": 0.6
                  }
                },
                "delay": {
                  "feedback": {
                    "value": 0.2
                  },
                  "stereo-delay": {
                    "value": 72.4
                  },
                  "time": {
                    "value": 222
                  },
                  "wet": {
                    "value": 0.7
                  }
                },
                "filter1": {
                  "freq": {
                    "value": 1304
                  },
                  "q": {
                    "value": 0.09
                  },
                  "type": {
                    "value": 0
                  }
                },
                "filter2": {
                  "freq": {
                    "value": 925
                  },
                  "q": {
                    "value": 0.7
                  },
                  "type": {
                    "value": 0
                  }
                },
                "fm": {
                  "fm": {
                    "value": 0
                  },
                  "freq": {
                    "value": 121
                  },
                  "index": {
                    "value": 0.37
                  },
                  "level": {
                    "value": 0.87
                  }
                },
                "lfo1": {
                  "dest": {
                    "value": 0
                  },
                  "freq": {
                    "value": 0
                  }
                },
                "lfo2": {
                  "dest": {
                    "value": 0
                  },
                  "freq": {
                    "value": 2.4
                  }
                },
                "osc1": {
                  "level": {
                    "value": 0.5
                  },
                  "waveform": {
                    "value": 2
                  }
                },
                "osc2": {
                  "level": {
                    "value": 0.5
                  },
                  "waveform": {
                    "value": 1
                  }
                },
                "osc3": {
                  "level": {
                    "value": 0.33
                  },
                  "waveform": {
                    "value": 0
                  }
                },
                "overdrive": {
                  "__sps": {
                    "Drive~": {},
                    "Mix~": {},
                    "Post-EQ~": {
                      "__sps": {
                        "Bass~": {},
                        "Mid~": {},
                        "Treble~": {}
                      }
                    },
                    "Pre-EQ~": {},
                    "Volume~": {}
                  },
                  "bass": {
                    "value": 48
                  },
                  "drive": {
                    "value": 0
                  },
                  "highcut": {
                    "value": 20.1
                  },
                  "lowcut": {
                    "value": 13
                  },
                  "mid": {
                    "value": 81
                  },
                  "midfreq": {
                    "value": 69
                  },
                  "mix": {
                    "value": 19
                  },
                  "treble": {
                    "value": 62
                  },
                  "volume": {
                    "value": 0
                  }
                },
                "reverb": {
                  "__sps": {
                    "Chorus~": {},
                    "Delay~": {},
                    "Feedback~": {
                      "__sps": {
                        "Gate~": {}
                      }
                    },
                    "Mix~": {},
                    "Octave~": {
                      "__sps": {
                        "Shift~": {},
                        "Shift~[1]": {}
                      }
                    },
                    "Pitch~": {
                      "__sps": {
                        "Shift~": {},
                        "Shift~[1]": {}
                      }
                    },
                    "Reverb~": {
                      "__sps": {
                        "Blur~": {},
                        "CombL~": {},
                        "CombR~": {},
                        "Damp~": {},
                        "MapParams": {},
                        "RoomA~": {},
                        "RoomB~": {},
                        "Shuffle~": {}
                      }
                    },
                    "Volumes~": {}
                  },
                  "chorus": {
                    "value": 0
                  },
                  "damp": {
                    "value": 27
                  },
                  "decay": {
                    "value": 53
                  },
                  "delay": {
                    "value": 0
                  },
                  "diff": {
                    "value": 43
                  },
                  "feedback": {
                    "value": 0
                  },
                  "jitter": {
                    "value": 76
                  },
                  "mix": {
                    "value": 0
                  },
                  "octdamp": {
                    "value": 0
                  },
                  "octvol": {
                    "value": 0
                  },
                  "pitch": {
                    "value": 0
                  },
                  "pitchvol": {
                    "value": 0
                  },
                  "revvol": {
                    "value": 100
                  },
                  "size": {
                    "value": 82
                  },
                  "window": {
                    "value": 36
                  }
                },
                "trem": {
                  "__sps": {
                    "LFO~": {},
                    "TapTempo": {}
                  },
                  "depth": {
                    "value": 0
                  },
                  "rate": {
                    "value": 0
                  },
                  "spread": {
                    "value": 0
                  }
                }
              }
            },
            {
              "__sps": {
                "adsr": {
                  "attack": {
                    "value": 25
                  },
                  "delay": {
                    "value": 27.900000000000002
                  },
                  "release": {
                    "value": 118
                  },
                  "sustain": {
                    "value": 0.6
                  }
                },
                "delay": {
                  "feedback": {
                    "value": 0.2
                  },
                  "stereo-delay": {
                    "value": 72.4
                  },
                  "time": {
                    "value": 222
                  },
                  "wet": {
                    "value": 0.7
                  }
                },
                "filter1": {
                  "freq": {
                    "value": 1304
                  },
                  "q": {
                    "value": 0.09
                  },
                  "type": {
                    "value": 0
                  }
                },
                "filter2": {
                  "freq": {
                    "value": 925
                  },
                  "q": {
                    "value": 0.7
                  },
                  "type": {
                    "value": 0
                  }
                },
                "fm": {
                  "fm": {
                    "value": 0
                  },
                  "freq": {
                    "value": 121
                  },
                  "index": {
                    "value": 0.37
                  },
                  "level": {
                    "value": 0.87
                  }
                },
                "lfo1": {
                  "dest": {
                    "value": 0
                  },
                  "freq": {
                    "value": 0
                  }
                },
                "lfo2": {
                  "dest": {
                    "value": 0
                  },
                  "freq": {
                    "value": 2.4
                  }
                },
                "osc1": {
                  "level": {
                    "value": 0.5
                  },
                  "waveform": {
                    "value": 2
                  }
                },
                "osc2": {
                  "level": {
                    "value": 0.5
                  },
                  "waveform": {
                    "value": 1
                  }
                },
                "osc3": {
                  "level": {
                    "value": 0.33
                  },
                  "waveform": {
                    "value": 0
                  }
                },
                "overdrive": {
                  "__sps": {
                    "Drive~": {},
                    "Mix~": {},
                    "Post-EQ~": {
                      "__sps": {
                        "Bass~": {},
                        "Mid~": {},
                        "Treble~": {}
                      }
                    },
                    "Pre-EQ~": {},
                    "Volume~": {}
                  },
                  "bass": {
                    "value": 48
                  },
                  "drive": {
                    "value": 0
                  },
                  "highcut": {
                    "value": 20.1
                  },
                  "lowcut": {
                    "value": 13
                  },
                  "mid": {
                    "value": 81
                  },
                  "midfreq": {
                    "value": 69
                  },
                  "mix": {
                    "value": 19
                  },
                  "treble": {
                    "value": 62
                  },
                  "volume": {
                    "value": 0
                  }
                },
                "reverb": {
                  "__sps": {
                    "Chorus~": {},
                    "Delay~": {},
                    "Feedback~": {
                      "__sps": {
                        "Gate~": {}
                      }
                    },
                    "Mix~": {},
                    "Octave~": {
                      "__sps": {
                        "Shift~": {},
                        "Shift~[1]": {}
                      }
                    },
                    "Pitch~": {
                      "__sps": {
                        "Shift~": {},
                        "Shift~[1]": {}
                      }
                    },
                    "Reverb~": {
                      "__sps": {
                        "Blur~": {},
                        "CombL~": {},
                        "CombR~": {},
                        "Damp~": {},
                        "MapParams": {},
                        "RoomA~": {},
                        "RoomB~": {},
                        "Shuffle~": {}
                      }
                    },
                    "Volumes~": {}
                  },
                  "chorus": {
                    "value": 0
                  },
                  "damp": {
                    "value": 27
                  },
                  "decay": {
                    "value": 53
                  },
                  "delay": {
                    "value": 0
                  },
                  "diff": {
                    "value": 43
                  },
                  "feedback": {
                    "value": 0
                  },
                  "jitter": {
                    "value": 76
                  },
                  "mix": {
                    "value": 0
                  },
                  "octdamp": {
                    "value": 0
                  },
                  "octvol": {
                    "value": 0
                  },
                  "pitch": {
                    "value": 0
                  },
                  "pitchvol": {
                    "value": 0
                  },
                  "revvol": {
                    "value": 100
                  },
                  "size": {
                    "value": 82
                  },
                  "window": {
                    "value": 36
                  }
                },
                "trem": {
                  "__sps": {
                    "LFO~": {},
                    "TapTempo": {}
                  },
                  "depth": {
                    "value": 0
                  },
                  "rate": {
                    "value": 0
                  },
                  "spread": {
                    "value": 0
                  }
                }
              }
            },
            {
              "__sps": {
                "adsr": {
                  "attack": {
                    "value": 25
                  },
                  "delay": {
                    "value": 27.900000000000002
                  },
                  "release": {
                    "value": 118
                  },
                  "sustain": {
                    "value": 0.6
                  }
                },
                "delay": {
                  "feedback": {
                    "value": 0.2
                  },
                  "stereo-delay": {
                    "value": 72.4
                  },
                  "time": {
                    "value": 222
                  },
                  "wet": {
                    "value": 0.7
                  }
                },
                "filter1": {
                  "freq": {
                    "value": 1304
                  },
                  "q": {
                    "value": 0.09
                  },
                  "type": {
                    "value": 0
                  }
                },
                "filter2": {
                  "freq": {
                    "value": 925
                  },
                  "q": {
                    "value": 0.7
                  },
                  "type": {
                    "value": 0
                  }
                },
                "fm": {
                  "fm": {
                    "value": 0
                  },
                  "freq": {
                    "value": 121
                  },
                  "index": {
                    "value": 0.37
                  },
                  "level": {
                    "value": 0.87
                  }
                },
                "lfo1": {
                  "dest": {
                    "value": 0
                  },
                  "freq": {
                    "value": 0
                  }
                },
                "lfo2": {
                  "dest": {
                    "value": 0
                  },
                  "freq": {
                    "value": 2.4
                  }
                },
                "osc1": {
                  "level": {
                    "value": 0.5
                  },
                  "waveform": {
                    "value": 2
                  }
                },
                "osc2": {
                  "level": {
                    "value": 0.5
                  },
                  "waveform": {
                    "value": 1
                  }
                },
                "osc3": {
                  "level": {
                    "value": 0.33
                  },
                  "waveform": {
                    "value": 0
                  }
                },
                "overdrive": {
                  "__sps": {
                    "Drive~": {},
                    "Mix~": {},
                    "Post-EQ~": {
                      "__sps": {
                        "Bass~": {},
                        "Mid~": {},
                        "Treble~": {}
                      }
                    },
                    "Pre-EQ~": {},
                    "Volume~": {}
                  },
                  "bass": {
                    "value": 48
                  },
                  "drive": {
                    "value": 0
                  },
                  "highcut": {
                    "value": 20.1
                  },
                  "lowcut": {
                    "value": 13
                  },
                  "mid": {
                    "value": 81
                  },
                  "midfreq": {
                    "value": 69
                  },
                  "mix": {
                    "value": 19
                  },
                  "treble": {
                    "value": 62
                  },
                  "volume": {
                    "value": 0
                  }
                },
                "reverb": {
                  "__sps": {
                    "Chorus~": {},
                    "Delay~": {},
                    "Feedback~": {
                      "__sps": {
                        "Gate~": {}
                      }
                    },
                    "Mix~": {},
                    "Octave~": {
                      "__sps": {
                        "Shift~": {},
                        "Shift~[1]": {}
                      }
                    },
                    "Pitch~": {
                      "__sps": {
                        "Shift~": {},
                        "Shift~[1]": {}
                      }
                    },
                    "Reverb~": {
                      "__sps": {
                        "Blur~": {},
                        "CombL~": {},
                        "CombR~": {},
                        "Damp~": {},
                        "MapParams": {},
                        "RoomA~": {},
                        "RoomB~": {},
                        "Shuffle~": {}
                      }
                    },
                    "Volumes~": {}
                  },
                  "chorus": {
                    "value": 0
                  },
                  "damp": {
                    "value": 27
                  },
                  "decay": {
                    "value": 53
                  },
                  "delay": {
                    "value": 0
                  },
                  "diff": {
                    "value": 43
                  },
                  "feedback": {
                    "value": 0
                  },
                  "jitter": {
                    "value": 76
                  },
                  "mix": {
                    "value": 0
                  },
                  "octdamp": {
                    "value": 0
                  },
                  "octvol": {
                    "value": 0
                  },
                  "pitch": {
                    "value": 0
                  },
                  "pitchvol": {
                    "value": 0
                  },
                  "revvol": {
                    "value": 100
                  },
                  "size": {
                    "value": 82
                  },
                  "window": {
                    "value": 36
                  }
                },
                "trem": {
                  "__sps": {
                    "LFO~": {},
                    "TapTempo": {}
                  },
                  "depth": {
                    "value": 0
                  },
                  "rate": {
                    "value": 0
                  },
                  "spread": {
                    "value": 0
                  }
                }
              }
            },
            {
              "__sps": {
                "adsr": {
                  "attack": {
                    "value": 25
                  },
                  "delay": {
                    "value": 27.900000000000002
                  },
                  "release": {
                    "value": 118
                  },
                  "sustain": {
                    "value": 0.6
                  }
                },
                "delay": {
                  "feedback": {
                    "value": 0.2
                  },
                  "stereo-delay": {
                    "value": 72.4
                  },
                  "time": {
                    "value": 222
                  },
                  "wet": {
                    "value": 0.7
                  }
                },
                "filter1": {
                  "freq": {
                    "value": 1304
                  },
                  "q": {
                    "value": 0.09
                  },
                  "type": {
                    "value": 0
                  }
                },
                "filter2": {
                  "freq": {
                    "value": 925
                  },
                  "q": {
                    "value": 0.7
                  },
                  "type": {
                    "value": 0
                  }
                },
                "fm": {
                  "fm": {
                    "value": 0
                  },
                  "freq": {
                    "value": 121
                  },
                  "index": {
                    "value": 0.37
                  },
                  "level": {
                    "value": 0.87
                  }
                },
                "lfo1": {
                  "dest": {
                    "value": 0
                  },
                  "freq": {
                    "value": 0
                  }
                },
                "lfo2": {
                  "dest": {
                    "value": 0
                  },
                  "freq": {
                    "value": 2.4
                  }
                },
                "osc1": {
                  "level": {
                    "value": 0.5
                  },
                  "waveform": {
                    "value": 2
                  }
                },
                "osc2": {
                  "level": {
                    "value": 0.5
                  },
                  "waveform": {
                    "value": 1
                  }
                },
                "osc3": {
                  "level": {
                    "value": 0.33
                  },
                  "waveform": {
                    "value": 0
                  }
                },
                "overdrive": {
                  "__sps": {
                    "Drive~": {},
                    "Mix~": {},
                    "Post-EQ~": {
                      "__sps": {
                        "Bass~": {},
                        "Mid~": {},
                        "Treble~": {}
                      }
                    },
                    "Pre-EQ~": {},
                    "Volume~": {}
                  },
                  "bass": {
                    "value": 48
                  },
                  "drive": {
                    "value": 0
                  },
                  "highcut": {
                    "value": 20.1
                  },
                  "lowcut": {
                    "value": 13
                  },
                  "mid": {
                    "value": 81
                  },
                  "midfreq": {
                    "value": 69
                  },
                  "mix": {
                    "value": 19
                  },
                  "treble": {
                    "value": 62
                  },
                  "volume": {
                    "value": 0
                  }
                },
                "reverb": {
                  "__sps": {
                    "Chorus~": {},
                    "Delay~": {},
                    "Feedback~": {
                      "__sps": {
                        "Gate~": {}
                      }
                    },
                    "Mix~": {},
                    "Octave~": {
                      "__sps": {
                        "Shift~": {},
                        "Shift~[1]": {}
                      }
                    },
                    "Pitch~": {
                      "__sps": {
                        "Shift~": {},
                        "Shift~[1]": {}
                      }
                    },
                    "Reverb~": {
                      "__sps": {
                        "Blur~": {},
                        "CombL~": {},
                        "CombR~": {},
                        "Damp~": {},
                        "MapParams": {},
                        "RoomA~": {},
                        "RoomB~": {},
                        "Shuffle~": {}
                      }
                    },
                    "Volumes~": {}
                  },
                  "chorus": {
                    "value": 0
                  },
                  "damp": {
                    "value": 27
                  },
                  "decay": {
                    "value": 53
                  },
                  "delay": {
                    "value": 0
                  },
                  "diff": {
                    "value": 43
                  },
                  "feedback": {
                    "value": 0
                  },
                  "jitter": {
                    "value": 76
                  },
                  "mix": {
                    "value": 0
                  },
                  "octdamp": {
                    "value": 0
                  },
                  "octvol": {
                    "value": 0
                  },
                  "pitch": {
                    "value": 0
                  },
                  "pitchvol": {
                    "value": 0
                  },
                  "revvol": {
                    "value": 100
                  },
                  "size": {
                    "value": 82
                  },
                  "window": {
                    "value": 36
                  }
                },
                "trem": {
                  "__sps": {
                    "LFO~": {},
                    "TapTempo": {}
                  },
                  "depth": {
                    "value": 0
                  },
                  "rate": {
                    "value": 0
                  },
                  "spread": {
                    "value": 0
                  }
                }
              }
            },
            {
              "__sps": {
                "adsr": {
                  "attack": {
                    "value": 25
                  },
                  "delay": {
                    "value": 27.900000000000002
                  },
                  "release": {
                    "value": 118
                  },
                  "sustain": {
                    "value": 0.6
                  }
                },
                "delay": {
                  "feedback": {
                    "value": 0.2
                  },
                  "stereo-delay": {
                    "value": 72.4
                  },
                  "time": {
                    "value": 222
                  },
                  "wet": {
                    "value": 0.7
                  }
                },
                "filter1": {
                  "freq": {
                    "value": 1304
                  },
                  "q": {
                    "value": 0.09
                  },
                  "type": {
                    "value": 0
                  }
                },
                "filter2": {
                  "freq": {
                    "value": 925
                  },
                  "q": {
                    "value": 0.7
                  },
                  "type": {
                    "value": 0
                  }
                },
                "fm": {
                  "fm": {
                    "value": 0
                  },
                  "freq": {
                    "value": 121
                  },
                  "index": {
                    "value": 0.37
                  },
                  "level": {
                    "value": 0.87
                  }
                },
                "lfo1": {
                  "dest": {
                    "value": 0
                  },
                  "freq": {
                    "value": 0
                  }
                },
                "lfo2": {
                  "dest": {
                    "value": 0
                  },
                  "freq": {
                    "value": 2.4
                  }
                },
                "osc1": {
                  "level": {
                    "value": 0.5
                  },
                  "waveform": {
                    "value": 2
                  }
                },
                "osc2": {
                  "level": {
                    "value": 0.5
                  },
                  "waveform": {
                    "value": 1
                  }
                },
                "osc3": {
                  "level": {
                    "value": 0.33
                  },
                  "waveform": {
                    "value": 0
                  }
                },
                "overdrive": {
                  "__sps": {
                    "Drive~": {},
                    "Mix~": {},
                    "Post-EQ~": {
                      "__sps": {
                        "Bass~": {},
                        "Mid~": {},
                        "Treble~": {}
                      }
                    },
                    "Pre-EQ~": {},
                    "Volume~": {}
                  },
                  "bass": {
                    "value": 48
                  },
                  "drive": {
                    "value": 0
                  },
                  "highcut": {
                    "value": 20.1
                  },
                  "lowcut": {
                    "value": 13
                  },
                  "mid": {
                    "value": 81
                  },
                  "midfreq": {
                    "value": 69
                  },
                  "mix": {
                    "value": 19
                  },
                  "treble": {
                    "value": 62
                  },
                  "volume": {
                    "value": 0
                  }
                },
                "reverb": {
                  "__sps": {
                    "Chorus~": {},
                    "Delay~": {},
                    "Feedback~": {
                      "__sps": {
                        "Gate~": {}
                      }
                    },
                    "Mix~": {},
                    "Octave~": {
                      "__sps": {
                        "Shift~": {},
                        "Shift~[1]": {}
                      }
                    },
                    "Pitch~": {
                      "__sps": {
                        "Shift~": {},
                        "Shift~[1]": {}
                      }
                    },
                    "Reverb~": {
                      "__sps": {
                        "Blur~": {},
                        "CombL~": {},
                        "CombR~": {},
                        "Damp~": {},
                        "MapParams": {},
                        "RoomA~": {},
                        "RoomB~": {},
                        "Shuffle~": {}
                      }
                    },
                    "Volumes~": {}
                  },
                  "chorus": {
                    "value": 0
                  },
                  "damp": {
                    "value": 27
                  },
                  "decay": {
                    "value": 53
                  },
                  "delay": {
                    "value": 0
                  },
                  "diff": {
                    "value": 43
                  },
                  "feedback": {
                    "value": 0
                  },
                  "jitter": {
                    "value": 76
                  },
                  "mix": {
                    "value": 0
                  },
                  "octdamp": {
                    "value": 0
                  },
                  "octvol": {
                    "value": 0
                  },
                  "pitch": {
                    "value": 0
                  },
                  "pitchvol": {
                    "value": 0
                  },
                  "revvol": {
                    "value": 100
                  },
                  "size": {
                    "value": 82
                  },
                  "window": {
                    "value": 36
                  }
                },
                "trem": {
                  "__sps": {
                    "LFO~": {},
                    "TapTempo": {}
                  },
                  "depth": {
                    "value": 0
                  },
                  "rate": {
                    "value": 0
                  },
                  "spread": {
                    "value": 0
                  }
                }
              }
            },
            {
              "__sps": {
                "adsr": {
                  "attack": {
                    "value": 25
                  },
                  "delay": {
                    "value": 27.900000000000002
                  },
                  "release": {
                    "value": 118
                  },
                  "sustain": {
                    "value": 0.6
                  }
                },
                "delay": {
                  "feedback": {
                    "value": 0.2
                  },
                  "stereo-delay": {
                    "value": 72.4
                  },
                  "time": {
                    "value": 222
                  },
                  "wet": {
                    "value": 0.7
                  }
                },
                "filter1": {
                  "freq": {
                    "value": 1304
                  },
                  "q": {
                    "value": 0.09
                  },
                  "type": {
                    "value": 0
                  }
                },
                "filter2": {
                  "freq": {
                    "value": 925
                  },
                  "q": {
                    "value": 0.7
                  },
                  "type": {
                    "value": 0
                  }
                },
                "fm": {
                  "fm": {
                    "value": 0
                  },
                  "freq": {
                    "value": 121
                  },
                  "index": {
                    "value": 0.37
                  },
                  "level": {
                    "value": 0.87
                  }
                },
                "lfo1": {
                  "dest": {
                    "value": 0
                  },
                  "freq": {
                    "value": 0
                  }
                },
                "lfo2": {
                  "dest": {
                    "value": 0
                  },
                  "freq": {
                    "value": 2.4
                  }
                },
                "osc1": {
                  "level": {
                    "value": 0.5
                  },
                  "waveform": {
                    "value": 2
                  }
                },
                "osc2": {
                  "level": {
                    "value": 0.5
                  },
                  "waveform": {
                    "value": 1
                  }
                },
                "osc3": {
                  "level": {
                    "value": 0.33
                  },
                  "waveform": {
                    "value": 0
                  }
                },
                "overdrive": {
                  "__sps": {
                    "Drive~": {},
                    "Mix~": {},
                    "Post-EQ~": {
                      "__sps": {
                        "Bass~": {},
                        "Mid~": {},
                        "Treble~": {}
                      }
                    },
                    "Pre-EQ~": {},
                    "Volume~": {}
                  },
                  "bass": {
                    "value": 48
                  },
                  "drive": {
                    "value": 0
                  },
                  "highcut": {
                    "value": 20.1
                  },
                  "lowcut": {
                    "value": 13
                  },
                  "mid": {
                    "value": 81
                  },
                  "midfreq": {
                    "value": 69
                  },
                  "mix": {
                    "value": 19
                  },
                  "treble": {
                    "value": 62
                  },
                  "volume": {
                    "value": 0
                  }
                },
                "reverb": {
                  "__sps": {
                    "Chorus~": {},
                    "Delay~": {},
                    "Feedback~": {
                      "__sps": {
                        "Gate~": {}
                      }
                    },
                    "Mix~": {},
                    "Octave~": {
                      "__sps": {
                        "Shift~": {},
                        "Shift~[1]": {}
                      }
                    },
                    "Pitch~": {
                      "__sps": {
                        "Shift~": {},
                        "Shift~[1]": {}
                      }
                    },
                    "Reverb~": {
                      "__sps": {
                        "Blur~": {},
                        "CombL~": {},
                        "CombR~": {},
                        "Damp~": {},
                        "MapParams": {},
                        "RoomA~": {},
                        "RoomB~": {},
                        "Shuffle~": {}
                      }
                    },
                    "Volumes~": {}
                  },
                  "chorus": {
                    "value": 0
                  },
                  "damp": {
                    "value": 27
                  },
                  "decay": {
                    "value": 53
                  },
                  "delay": {
                    "value": 0
                  },
                  "diff": {
                    "value": 43
                  },
                  "feedback": {
                    "value": 0
                  },
                  "jitter": {
                    "value": 76
                  },
                  "mix": {
                    "value": 0
                  },
                  "octdamp": {
                    "value": 0
                  },
                  "octvol": {
                    "value": 0
                  },
                  "pitch": {
                    "value": 0
                  },
                  "pitchvol": {
                    "value": 0
                  },
                  "revvol": {
                    "value": 100
                  },
                  "size": {
                    "value": 82
                  },
                  "window": {
                    "value": 36
                  }
                },
                "trem": {
                  "__sps": {
                    "LFO~": {},
                    "TapTempo": {}
                  },
                  "depth": {
                    "value": 0
                  },
                  "rate": {
                    "value": 0
                  },
                  "spread": {
                    "value": 0
                  }
                }
              }
            },
            {
              "__sps": {
                "adsr": {
                  "attack": {
                    "value": 25
                  },
                  "delay": {
                    "value": 27.900000000000002
                  },
                  "release": {
                    "value": 118
                  },
                  "sustain": {
                    "value": 0.6
                  }
                },
                "delay": {
                  "feedback": {
                    "value": 0.2
                  },
                  "stereo-delay": {
                    "value": 72.4
                  },
                  "time": {
                    "value": 222
                  },
                  "wet": {
                    "value": 0.7
                  }
                },
                "filter1": {
                  "freq": {
                    "value": 1304
                  },
                  "q": {
                    "value": 0.09
                  },
                  "type": {
                    "value": 0
                  }
                },
                "filter2": {
                  "freq": {
                    "value": 925
                  },
                  "q": {
                    "value": 0.7
                  },
                  "type": {
                    "value": 0
                  }
                },
                "fm": {
                  "fm": {
                    "value": 0
                  },
                  "freq": {
                    "value": 121
                  },
                  "index": {
                    "value": 0.37
                  },
                  "level": {
                    "value": 0.87
                  }
                },
                "lfo1": {
                  "dest": {
                    "value": 0
                  },
                  "freq": {
                    "value": 0
                  }
                },
                "lfo2": {
                  "dest": {
                    "value": 0
                  },
                  "freq": {
                    "value": 2.4
                  }
                },
                "osc1": {
                  "level": {
                    "value": 0.5
                  },
                  "waveform": {
                    "value": 2
                  }
                },
                "osc2": {
                  "level": {
                    "value": 0.5
                  },
                  "waveform": {
                    "value": 1
                  }
                },
                "osc3": {
                  "level": {
                    "value": 0.33
                  },
                  "waveform": {
                    "value": 0
                  }
                },
                "overdrive": {
                  "__sps": {
                    "Drive~": {},
                    "Mix~": {},
                    "Post-EQ~": {
                      "__sps": {
                        "Bass~": {},
                        "Mid~": {},
                        "Treble~": {}
                      }
                    },
                    "Pre-EQ~": {},
                    "Volume~": {}
                  },
                  "bass": {
                    "value": 48
                  },
                  "drive": {
                    "value": 0
                  },
                  "highcut": {
                    "value": 20.1
                  },
                  "lowcut": {
                    "value": 13
                  },
                  "mid": {
                    "value": 81
                  },
                  "midfreq": {
                    "value": 69
                  },
                  "mix": {
                    "value": 19
                  },
                  "treble": {
                    "value": 62
                  },
                  "volume": {
                    "value": 0
                  }
                },
                "reverb": {
                  "__sps": {
                    "Chorus~": {},
                    "Delay~": {},
                    "Feedback~": {
                      "__sps": {
                        "Gate~": {}
                      }
                    },
                    "Mix~": {},
                    "Octave~": {
                      "__sps": {
                        "Shift~": {},
                        "Shift~[1]": {}
                      }
                    },
                    "Pitch~": {
                      "__sps": {
                        "Shift~": {},
                        "Shift~[1]": {}
                      }
                    },
                    "Reverb~": {
                      "__sps": {
                        "Blur~": {},
                        "CombL~": {},
                        "CombR~": {},
                        "Damp~": {},
                        "MapParams": {},
                        "RoomA~": {},
                        "RoomB~": {},
                        "Shuffle~": {}
                      }
                    },
                    "Volumes~": {}
                  },
                  "chorus": {
                    "value": 0
                  },
                  "damp": {
                    "value": 27
                  },
                  "decay": {
                    "value": 53
                  },
                  "delay": {
                    "value": 0
                  },
                  "diff": {
                    "value": 43
                  },
                  "feedback": {
                    "value": 0
                  },
                  "jitter": {
                    "value": 76
                  },
                  "mix": {
                    "value": 0
                  },
                  "octdamp": {
                    "value": 0
                  },
                  "octvol": {
                    "value": 0
                  },
                  "pitch": {
                    "value": 0
                  },
                  "pitchvol": {
                    "value": 0
                  },
                  "revvol": {
                    "value": 100
                  },
                  "size": {
                    "value": 82
                  },
                  "window": {
                    "value": 36
                  }
                },
                "trem": {
                  "__sps": {
                    "LFO~": {},
                    "TapTempo": {}
                  },
                  "depth": {
                    "value": 0
                  },
                  "rate": {
                    "value": 0
                  },
                  "spread": {
                    "value": 0
                  }
                }
              }
            },
            {
              "__sps": {
                "adsr": {
                  "attack": {
                    "value": 25
                  },
                  "delay": {
                    "value": 27.900000000000002
                  },
                  "release": {
                    "value": 118
                  },
                  "sustain": {
                    "value": 0.6
                  }
                },
                "delay": {
                  "feedback": {
                    "value": 0.2
                  },
                  "stereo-delay": {
                    "value": 72.4
                  },
                  "time": {
                    "value": 222
                  },
                  "wet": {
                    "value": 0.7
                  }
                },
                "filter1": {
                  "freq": {
                    "value": 1304
                  },
                  "q": {
                    "value": 0.09
                  },
                  "type": {
                    "value": 0
                  }
                },
                "filter2": {
                  "freq": {
                    "value": 925
                  },
                  "q": {
                    "value": 0.7
                  },
                  "type": {
                    "value": 0
                  }
                },
                "fm": {
                  "fm": {
                    "value": 0
                  },
                  "freq": {
                    "value": 121
                  },
                  "index": {
                    "value": 0.37
                  },
                  "level": {
                    "value": 0.87
                  }
                },
                "lfo1": {
                  "dest": {
                    "value": 0
                  },
                  "freq": {
                    "value": 0
                  }
                },
                "lfo2": {
                  "dest": {
                    "value": 0
                  },
                  "freq": {
                    "value": 2.4
                  }
                },
                "osc1": {
                  "level": {
                    "value": 0.5
                  },
                  "waveform": {
                    "value": 2
                  }
                },
                "osc2": {
                  "level": {
                    "value": 0.5
                  },
                  "waveform": {
                    "value": 1
                  }
                },
                "osc3": {
                  "level": {
                    "value": 0.33
                  },
                  "waveform": {
                    "value": 0
                  }
                },
                "overdrive": {
                  "__sps": {
                    "Drive~": {},
                    "Mix~": {},
                    "Post-EQ~": {
                      "__sps": {
                        "Bass~": {},
                        "Mid~": {},
                        "Treble~": {}
                      }
                    },
                    "Pre-EQ~": {},
                    "Volume~": {}
                  },
                  "bass": {
                    "value": 48
                  },
                  "drive": {
                    "value": 0
                  },
                  "highcut": {
                    "value": 20.1
                  },
                  "lowcut": {
                    "value": 13
                  },
                  "mid": {
                    "value": 81
                  },
                  "midfreq": {
                    "value": 69
                  },
                  "mix": {
                    "value": 19
                  },
                  "treble": {
                    "value": 62
                  },
                  "volume": {
                    "value": 0
                  }
                },
                "reverb": {
                  "__sps": {
                    "Chorus~": {},
                    "Delay~": {},
                    "Feedback~": {
                      "__sps": {
                        "Gate~": {}
                      }
                    },
                    "Mix~": {},
                    "Octave~": {
                      "__sps": {
                        "Shift~": {},
                        "Shift~[1]": {}
                      }
                    },
                    "Pitch~": {
                      "__sps": {
                        "Shift~": {},
                        "Shift~[1]": {}
                      }
                    },
                    "Reverb~": {
                      "__sps": {
                        "Blur~": {},
                        "CombL~": {},
                        "CombR~": {},
                        "Damp~": {},
                        "MapParams": {},
                        "RoomA~": {},
                        "RoomB~": {},
                        "Shuffle~": {}
                      }
                    },
                    "Volumes~": {}
                  },
                  "chorus": {
                    "value": 0
                  },
                  "damp": {
                    "value": 27
                  },
                  "decay": {
                    "value": 53
                  },
                  "delay": {
                    "value": 0
                  },
                  "diff": {
                    "value": 43
                  },
                  "feedback": {
                    "value": 0
                  },
                  "jitter": {
                    "value": 76
                  },
                  "mix": {
                    "value": 0
                  },
                  "octdamp": {
                    "value": 0
                  },
                  "octvol": {
                    "value": 0
                  },
                  "pitch": {
                    "value": 0
                  },
                  "pitchvol": {
                    "value": 0
                  },
                  "revvol": {
                    "value": 100
                  },
                  "size": {
                    "value": 82
                  },
                  "window": {
                    "value": 36
                  }
                },
                "trem": {
                  "__sps": {
                    "LFO~": {},
                    "TapTempo": {}
                  },
                  "depth": {
                    "value": 0
                  },
                  "rate": {
                    "value": 0
                  },
                  "spread": {
                    "value": 0
                  }
                }
              }
            },
            {
              "__sps": {
                "adsr": {
                  "attack": {
                    "value": 25
                  },
                  "delay": {
                    "value": 27.900000000000002
                  },
                  "release": {
                    "value": 118
                  },
                  "sustain": {
                    "value": 0.6
                  }
                },
                "delay": {
                  "feedback": {
                    "value": 0.2
                  },
                  "stereo-delay": {
                    "value": 72.4
                  },
                  "time": {
                    "value": 222
                  },
                  "wet": {
                    "value": 0.7
                  }
                },
                "filter1": {
                  "freq": {
                    "value": 1304
                  },
                  "q": {
                    "value": 0.09
                  },
                  "type": {
                    "value": 0
                  }
                },
                "filter2": {
                  "freq": {
                    "value": 925
                  },
                  "q": {
                    "value": 0.7
                  },
                  "type": {
                    "value": 0
                  }
                },
                "fm": {
                  "fm": {
                    "value": 0
                  },
                  "freq": {
                    "value": 121
                  },
                  "index": {
                    "value": 0.37
                  },
                  "level": {
                    "value": 0.87
                  }
                },
                "lfo1": {
                  "dest": {
                    "value": 0
                  },
                  "freq": {
                    "value": 0
                  }
                },
                "lfo2": {
                  "dest": {
                    "value": 0
                  },
                  "freq": {
                    "value": 2.4
                  }
                },
                "osc1": {
                  "level": {
                    "value": 0.5
                  },
                  "waveform": {
                    "value": 2
                  }
                },
                "osc2": {
                  "level": {
                    "value": 0.5
                  },
                  "waveform": {
                    "value": 1
                  }
                },
                "osc3": {
                  "level": {
                    "value": 0.33
                  },
                  "waveform": {
                    "value": 0
                  }
                },
                "overdrive": {
                  "__sps": {
                    "Drive~": {},
                    "Mix~": {},
                    "Post-EQ~": {
                      "__sps": {
                        "Bass~": {},
                        "Mid~": {},
                        "Treble~": {}
                      }
                    },
                    "Pre-EQ~": {},
                    "Volume~": {}
                  },
                  "bass": {
                    "value": 48
                  },
                  "drive": {
                    "value": 0
                  },
                  "highcut": {
                    "value": 20.1
                  },
                  "lowcut": {
                    "value": 13
                  },
                  "mid": {
                    "value": 81
                  },
                  "midfreq": {
                    "value": 69
                  },
                  "mix": {
                    "value": 19
                  },
                  "treble": {
                    "value": 62
                  },
                  "volume": {
                    "value": 0
                  }
                },
                "reverb": {
                  "__sps": {
                    "Chorus~": {},
                    "Delay~": {},
                    "Feedback~": {
                      "__sps": {
                        "Gate~": {}
                      }
                    },
                    "Mix~": {},
                    "Octave~": {
                      "__sps": {
                        "Shift~": {},
                        "Shift~[1]": {}
                      }
                    },
                    "Pitch~": {
                      "__sps": {
                        "Shift~": {},
                        "Shift~[1]": {}
                      }
                    },
                    "Reverb~": {
                      "__sps": {
                        "Blur~": {},
                        "CombL~": {},
                        "CombR~": {},
                        "Damp~": {},
                        "MapParams": {},
                        "RoomA~": {},
                        "RoomB~": {},
                        "Shuffle~": {}
                      }
                    },
                    "Volumes~": {}
                  },
                  "chorus": {
                    "value": 0
                  },
                  "damp": {
                    "value": 27
                  },
                  "decay": {
                    "value": 53
                  },
                  "delay": {
                    "value": 0
                  },
                  "diff": {
                    "value": 43
                  },
                  "feedback": {
                    "value": 0
                  },
                  "jitter": {
                    "value": 76
                  },
                  "mix": {
                    "value": 0
                  },
                  "octdamp": {
                    "value": 0
                  },
                  "octvol": {
                    "value": 0
                  },
                  "pitch": {
                    "value": 0
                  },
                  "pitchvol": {
                    "value": 0
                  },
                  "revvol": {
                    "value": 100
                  },
                  "size": {
                    "value": 82
                  },
                  "window": {
                    "value": 36
                  }
                },
                "trem": {
                  "__sps": {
                    "LFO~": {},
                    "TapTempo": {}
                  },
                  "depth": {
                    "value": 0
                  },
                  "rate": {
                    "value": 0
                  },
                  "spread": {
                    "value": 0
                  }
                }
              }
            },
            {
              "__sps": {
                "adsr": {
                  "attack": {
                    "value": 25
                  },
                  "delay": {
                    "value": 27.900000000000002
                  },
                  "release": {
                    "value": 118
                  },
                  "sustain": {
                    "value": 0.6
                  }
                },
                "delay": {
                  "feedback": {
                    "value": 0.2
                  },
                  "stereo-delay": {
                    "value": 72.4
                  },
                  "time": {
                    "value": 222
                  },
                  "wet": {
                    "value": 0.7
                  }
                },
                "filter1": {
                  "freq": {
                    "value": 1304
                  },
                  "q": {
                    "value": 0.09
                  },
                  "type": {
                    "value": 0
                  }
                },
                "filter2": {
                  "freq": {
                    "value": 925
                  },
                  "q": {
                    "value": 0.7
                  },
                  "type": {
                    "value": 0
                  }
                },
                "fm": {
                  "fm": {
                    "value": 0
                  },
                  "freq": {
                    "value": 121
                  },
                  "index": {
                    "value": 0.37
                  },
                  "level": {
                    "value": 0.87
                  }
                },
                "lfo1": {
                  "dest": {
                    "value": 0
                  },
                  "freq": {
                    "value": 0
                  }
                },
                "lfo2": {
                  "dest": {
                    "value": 0
                  },
                  "freq": {
                    "value": 2.4
                  }
                },
                "osc1": {
                  "level": {
                    "value": 0.5
                  },
                  "waveform": {
                    "value": 2
                  }
                },
                "osc2": {
                  "level": {
                    "value": 0.5
                  },
                  "waveform": {
                    "value": 1
                  }
                },
                "osc3": {
                  "level": {
                    "value": 0.33
                  },
                  "waveform": {
                    "value": 0
                  }
                },
                "overdrive": {
                  "__sps": {
                    "Drive~": {},
                    "Mix~": {},
                    "Post-EQ~": {
                      "__sps": {
                        "Bass~": {},
                        "Mid~": {},
                        "Treble~": {}
                      }
                    },
                    "Pre-EQ~": {},
                    "Volume~": {}
                  },
                  "bass": {
                    "value": 48
                  },
                  "drive": {
                    "value": 0
                  },
                  "highcut": {
                    "value": 20.1
                  },
                  "lowcut": {
                    "value": 13
                  },
                  "mid": {
                    "value": 81
                  },
                  "midfreq": {
                    "value": 69
                  },
                  "mix": {
                    "value": 19
                  },
                  "treble": {
                    "value": 62
                  },
                  "volume": {
                    "value": 0
                  }
                },
                "reverb": {
                  "__sps": {
                    "Chorus~": {},
                    "Delay~": {},
                    "Feedback~": {
                      "__sps": {
                        "Gate~": {}
                      }
                    },
                    "Mix~": {},
                    "Octave~": {
                      "__sps": {
                        "Shift~": {},
                        "Shift~[1]": {}
                      }
                    },
                    "Pitch~": {
                      "__sps": {
                        "Shift~": {},
                        "Shift~[1]": {}
                      }
                    },
                    "Reverb~": {
                      "__sps": {
                        "Blur~": {},
                        "CombL~": {},
                        "CombR~": {},
                        "Damp~": {},
                        "MapParams": {},
                        "RoomA~": {},
                        "RoomB~": {},
                        "Shuffle~": {}
                      }
                    },
                    "Volumes~": {}
                  },
                  "chorus": {
                    "value": 0
                  },
                  "damp": {
                    "value": 27
                  },
                  "decay": {
                    "value": 53
                  },
                  "delay": {
                    "value": 0
                  },
                  "diff": {
                    "value": 43
                  },
                  "feedback": {
                    "value": 0
                  },
                  "jitter": {
                    "value": 76
                  },
                  "mix": {
                    "value": 0
                  },
                  "octdamp": {
                    "value": 0
                  },
                  "octvol": {
                    "value": 0
                  },
                  "pitch": {
                    "value": 0
                  },
                  "pitchvol": {
                    "value": 0
                  },
                  "revvol": {
                    "value": 100
                  },
                  "size": {
                    "value": 82
                  },
                  "window": {
                    "value": 36
                  }
                },
                "trem": {
                  "__sps": {
                    "LFO~": {},
                    "TapTempo": {}
                  },
                  "depth": {
                    "value": 0
                  },
                  "rate": {
                    "value": 0
                  },
                  "spread": {
                    "value": 0
                  }
                }
              }
            },
            {
              "__sps": {
                "adsr": {
                  "attack": {
                    "value": 25
                  },
                  "delay": {
                    "value": 27.900000000000002
                  },
                  "release": {
                    "value": 118
                  },
                  "sustain": {
                    "value": 0.6
                  }
                },
                "delay": {
                  "feedback": {
                    "value": 0.2
                  },
                  "stereo-delay": {
                    "value": 72.4
                  },
                  "time": {
                    "value": 222
                  },
                  "wet": {
                    "value": 0.7
                  }
                },
                "filter1": {
                  "freq": {
                    "value": 1304
                  },
                  "q": {
                    "value": 0.09
                  },
                  "type": {
                    "value": 0
                  }
                },
                "filter2": {
                  "freq": {
                    "value": 925
                  },
                  "q": {
                    "value": 0.7
                  },
                  "type": {
                    "value": 0
                  }
                },
                "fm": {
                  "fm": {
                    "value": 0
                  },
                  "freq": {
                    "value": 121
                  },
                  "index": {
                    "value": 0.37
                  },
                  "level": {
                    "value": 0.87
                  }
                },
                "lfo1": {
                  "dest": {
                    "value": 0
                  },
                  "freq": {
                    "value": 0
                  }
                },
                "lfo2": {
                  "dest": {
                    "value": 0
                  },
                  "freq": {
                    "value": 2.4
                  }
                },
                "osc1": {
                  "level": {
                    "value": 0.5
                  },
                  "waveform": {
                    "value": 2
                  }
                },
                "osc2": {
                  "level": {
                    "value": 0.5
                  },
                  "waveform": {
                    "value": 1
                  }
                },
                "osc3": {
                  "level": {
                    "value": 0.33
                  },
                  "waveform": {
                    "value": 0
                  }
                },
                "overdrive": {
                  "__sps": {
                    "Drive~": {},
                    "Mix~": {},
                    "Post-EQ~": {
                      "__sps": {
                        "Bass~": {},
                        "Mid~": {},
                        "Treble~": {}
                      }
                    },
                    "Pre-EQ~": {},
                    "Volume~": {}
                  },
                  "bass": {
                    "value": 48
                  },
                  "drive": {
                    "value": 0
                  },
                  "highcut": {
                    "value": 20.1
                  },
                  "lowcut": {
                    "value": 13
                  },
                  "mid": {
                    "value": 81
                  },
                  "midfreq": {
                    "value": 69
                  },
                  "mix": {
                    "value": 19
                  },
                  "treble": {
                    "value": 62
                  },
                  "volume": {
                    "value": 0
                  }
                },
                "reverb": {
                  "__sps": {
                    "Chorus~": {},
                    "Delay~": {},
                    "Feedback~": {
                      "__sps": {
                        "Gate~": {}
                      }
                    },
                    "Mix~": {},
                    "Octave~": {
                      "__sps": {
                        "Shift~": {},
                        "Shift~[1]": {}
                      }
                    },
                    "Pitch~": {
                      "__sps": {
                        "Shift~": {},
                        "Shift~[1]": {}
                      }
                    },
                    "Reverb~": {
                      "__sps": {
                        "Blur~": {},
                        "CombL~": {},
                        "CombR~": {},
                        "Damp~": {},
                        "MapParams": {},
                        "RoomA~": {},
                        "RoomB~": {},
                        "Shuffle~": {}
                      }
                    },
                    "Volumes~": {}
                  },
                  "chorus": {
                    "value": 0
                  },
                  "damp": {
                    "value": 27
                  },
                  "decay": {
                    "value": 53
                  },
                  "delay": {
                    "value": 0
                  },
                  "diff": {
                    "value": 43
                  },
                  "feedback": {
                    "value": 0
                  },
                  "jitter": {
                    "value": 76
                  },
                  "mix": {
                    "value": 0
                  },
                  "octdamp": {
                    "value": 0
                  },
                  "octvol": {
                    "value": 0
                  },
                  "pitch": {
                    "value": 0
                  },
                  "pitchvol": {
                    "value": 0
                  },
                  "revvol": {
                    "value": 100
                  },
                  "size": {
                    "value": 82
                  },
                  "window": {
                    "value": 36
                  }
                },
                "trem": {
                  "__sps": {
                    "LFO~": {},
                    "TapTempo": {}
                  },
                  "depth": {
                    "value": 0
                  },
                  "rate": {
                    "value": 0
                  },
                  "spread": {
                    "value": 0
                  }
                }
              }
            },
            {
              "__sps": {
                "adsr": {
                  "attack": {
                    "value": 25
                  },
                  "delay": {
                    "value": 27.900000000000002
                  },
                  "release": {
                    "value": 118
                  },
                  "sustain": {
                    "value": 0.6
                  }
                },
                "delay": {
                  "feedback": {
                    "value": 0.2
                  },
                  "stereo-delay": {
                    "value": 72.4
                  },
                  "time": {
                    "value": 222
                  },
                  "wet": {
                    "value": 0.7
                  }
                },
                "filter1": {
                  "freq": {
                    "value": 1304
                  },
                  "q": {
                    "value": 0.09
                  },
                  "type": {
                    "value": 0
                  }
                },
                "filter2": {
                  "freq": {
                    "value": 925
                  },
                  "q": {
                    "value": 0.7
                  },
                  "type": {
                    "value": 0
                  }
                },
                "fm": {
                  "fm": {
                    "value": 0
                  },
                  "freq": {
                    "value": 121
                  },
                  "index": {
                    "value": 0.37
                  },
                  "level": {
                    "value": 0.87
                  }
                },
                "lfo1": {
                  "dest": {
                    "value": 0
                  },
                  "freq": {
                    "value": 0
                  }
                },
                "lfo2": {
                  "dest": {
                    "value": 0
                  },
                  "freq": {
                    "value": 2.4
                  }
                },
                "osc1": {
                  "level": {
                    "value": 0.5
                  },
                  "waveform": {
                    "value": 2
                  }
                },
                "osc2": {
                  "level": {
                    "value": 0.5
                  },
                  "waveform": {
                    "value": 1
                  }
                },
                "osc3": {
                  "level": {
                    "value": 0.33
                  },
                  "waveform": {
                    "value": 0
                  }
                },
                "overdrive": {
                  "__sps": {
                    "Drive~": {},
                    "Mix~": {},
                    "Post-EQ~": {
                      "__sps": {
                        "Bass~": {},
                        "Mid~": {},
                        "Treble~": {}
                      }
                    },
                    "Pre-EQ~": {},
                    "Volume~": {}
                  },
                  "bass": {
                    "value": 48
                  },
                  "drive": {
                    "value": 0
                  },
                  "highcut": {
                    "value": 20.1
                  },
                  "lowcut": {
                    "value": 13
                  },
                  "mid": {
                    "value": 81
                  },
                  "midfreq": {
                    "value": 69
                  },
                  "mix": {
                    "value": 19
                  },
                  "treble": {
                    "value": 62
                  },
                  "volume": {
                    "value": 0
                  }
                },
                "reverb": {
                  "__sps": {
                    "Chorus~": {},
                    "Delay~": {},
                    "Feedback~": {
                      "__sps": {
                        "Gate~": {}
                      }
                    },
                    "Mix~": {},
                    "Octave~": {
                      "__sps": {
                        "Shift~": {},
                        "Shift~[1]": {}
                      }
                    },
                    "Pitch~": {
                      "__sps": {
                        "Shift~": {},
                        "Shift~[1]": {}
                      }
                    },
                    "Reverb~": {
                      "__sps": {
                        "Blur~": {},
                        "CombL~": {},
                        "CombR~": {},
                        "Damp~": {},
                        "MapParams": {},
                        "RoomA~": {},
                        "RoomB~": {},
                        "Shuffle~": {}
                      }
                    },
                    "Volumes~": {}
                  },
                  "chorus": {
                    "value": 0
                  },
                  "damp": {
                    "value": 27
                  },
                  "decay": {
                    "value": 53
                  },
                  "delay": {
                    "value": 0
                  },
                  "diff": {
                    "value": 43
                  },
                  "feedback": {
                    "value": 0
                  },
                  "jitter": {
                    "value": 76
                  },
                  "mix": {
                    "value": 0
                  },
                  "octdamp": {
                    "value": 0
                  },
                  "octvol": {
                    "value": 0
                  },
                  "pitch": {
                    "value": 0
                  },
                  "pitchvol": {
                    "value": 0
                  },
                  "revvol": {
                    "value": 100
                  },
                  "size": {
                    "value": 82
                  },
                  "window": {
                    "value": 36
                  }
                },
                "trem": {
                  "__sps": {
                    "LFO~": {},
                    "TapTempo": {}
                  },
                  "depth": {
                    "value": 0
                  },
                  "rate": {
                    "value": 0
                  },
                  "spread": {
                    "value": 0
                  }
                }
              }
            },
            {
              "__sps": {
                "adsr": {
                  "attack": {
                    "value": 25
                  },
                  "delay": {
                    "value": 27.900000000000002
                  },
                  "release": {
                    "value": 118
                  },
                  "sustain": {
                    "value": 0.6
                  }
                },
                "delay": {
                  "feedback": {
                    "value": 0.2
                  },
                  "stereo-delay": {
                    "value": 72.4
                  },
                  "time": {
                    "value": 222
                  },
                  "wet": {
                    "value": 0.7
                  }
                },
                "filter1": {
                  "freq": {
                    "value": 1304
                  },
                  "q": {
                    "value": 0.09
                  },
                  "type": {
                    "value": 0
                  }
                },
                "filter2": {
                  "freq": {
                    "value": 925
                  },
                  "q": {
                    "value": 0.7
                  },
                  "type": {
                    "value": 0
                  }
                },
                "fm": {
                  "fm": {
                    "value": 0
                  },
                  "freq": {
                    "value": 121
                  },
                  "index": {
                    "value": 0.37
                  },
                  "level": {
                    "value": 0.87
                  }
                },
                "lfo1": {
                  "dest": {
                    "value": 0
                  },
                  "freq": {
                    "value": 0
                  }
                },
                "lfo2": {
                  "dest": {
                    "value": 0
                  },
                  "freq": {
                    "value": 2.4
                  }
                },
                "osc1": {
                  "level": {
                    "value": 0.5
                  },
                  "waveform": {
                    "value": 2
                  }
                },
                "osc2": {
                  "level": {
                    "value": 0.5
                  },
                  "waveform": {
                    "value": 1
                  }
                },
                "osc3": {
                  "level": {
                    "value": 0.33
                  },
                  "waveform": {
                    "value": 0
                  }
                },
                "overdrive": {
                  "__sps": {
                    "Drive~": {},
                    "Mix~": {},
                    "Post-EQ~": {
                      "__sps": {
                        "Bass~": {},
                        "Mid~": {},
                        "Treble~": {}
                      }
                    },
                    "Pre-EQ~": {},
                    "Volume~": {}
                  },
                  "bass": {
                    "value": 48
                  },
                  "drive": {
                    "value": 0
                  },
                  "highcut": {
                    "value": 20.1
                  },
                  "lowcut": {
                    "value": 13
                  },
                  "mid": {
                    "value": 81
                  },
                  "midfreq": {
                    "value": 69
                  },
                  "mix": {
                    "value": 19
                  },
                  "treble": {
                    "value": 62
                  },
                  "volume": {
                    "value": 0
                  }
                },
                "reverb": {
                  "__sps": {
                    "Chorus~": {},
                    "Delay~": {},
                    "Feedback~": {
                      "__sps": {
                        "Gate~": {}
                      }
                    },
                    "Mix~": {},
                    "Octave~": {
                      "__sps": {
                        "Shift~": {},
                        "Shift~[1]": {}
                      }
                    },
                    "Pitch~": {
                      "__sps": {
                        "Shift~": {},
                        "Shift~[1]": {}
                      }
                    },
                    "Reverb~": {
                      "__sps": {
                        "Blur~": {},
                        "CombL~": {},
                        "CombR~": {},
                        "Damp~": {},
                        "MapParams": {},
                        "RoomA~": {},
                        "RoomB~": {},
                        "Shuffle~": {}
                      }
                    },
                    "Volumes~": {}
                  },
                  "chorus": {
                    "value": 0
                  },
                  "damp": {
                    "value": 27
                  },
                  "decay": {
                    "value": 53
                  },
                  "delay": {
                    "value": 0
                  },
                  "diff": {
                    "value": 43
                  },
                  "feedback": {
                    "value": 0
                  },
                  "jitter": {
                    "value": 76
                  },
                  "mix": {
                    "value": 0
                  },
                  "octdamp": {
                    "value": 0
                  },
                  "octvol": {
                    "value": 0
                  },
                  "pitch": {
                    "value": 0
                  },
                  "pitchvol": {
                    "value": 0
                  },
                  "revvol": {
                    "value": 100
                  },
                  "size": {
                    "value": 82
                  },
                  "window": {
                    "value": 36
                  }
                },
                "trem": {
                  "__sps": {
                    "LFO~": {},
                    "TapTempo": {}
                  },
                  "depth": {
                    "value": 0
                  },
                  "rate": {
                    "value": 0
                  },
                  "spread": {
                    "value": 0
                  }
                }
              }
            },
            {
              "__sps": {
                "adsr": {
                  "attack": {
                    "value": 25
                  },
                  "delay": {
                    "value": 27.900000000000002
                  },
                  "release": {
                    "value": 118
                  },
                  "sustain": {
                    "value": 0.6
                  }
                },
                "delay": {
                  "feedback": {
                    "value": 0.2
                  },
                  "stereo-delay": {
                    "value": 72.4
                  },
                  "time": {
                    "value": 222
                  },
                  "wet": {
                    "value": 0.7
                  }
                },
                "filter1": {
                  "freq": {
                    "value": 1304
                  },
                  "q": {
                    "value": 0.09
                  },
                  "type": {
                    "value": 0
                  }
                },
                "filter2": {
                  "freq": {
                    "value": 925
                  },
                  "q": {
                    "value": 0.7
                  },
                  "type": {
                    "value": 0
                  }
                },
                "fm": {
                  "fm": {
                    "value": 0
                  },
                  "freq": {
                    "value": 121
                  },
                  "index": {
                    "value": 0.37
                  },
                  "level": {
                    "value": 0.87
                  }
                },
                "lfo1": {
                  "dest": {
                    "value": 0
                  },
                  "freq": {
                    "value": 0
                  }
                },
                "lfo2": {
                  "dest": {
                    "value": 0
                  },
                  "freq": {
                    "value": 2.4
                  }
                },
                "osc1": {
                  "level": {
                    "value": 0.5
                  },
                  "waveform": {
                    "value": 2
                  }
                },
                "osc2": {
                  "level": {
                    "value": 0.5
                  },
                  "waveform": {
                    "value": 1
                  }
                },
                "osc3": {
                  "level": {
                    "value": 0.33
                  },
                  "waveform": {
                    "value": 0
                  }
                },
                "overdrive": {
                  "__sps": {
                    "Drive~": {},
                    "Mix~": {},
                    "Post-EQ~": {
                      "__sps": {
                        "Bass~": {},
                        "Mid~": {},
                        "Treble~": {}
                      }
                    },
                    "Pre-EQ~": {},
                    "Volume~": {}
                  },
                  "bass": {
                    "value": 48
                  },
                  "drive": {
                    "value": 0
                  },
                  "highcut": {
                    "value": 20.1
                  },
                  "lowcut": {
                    "value": 13
                  },
                  "mid": {
                    "value": 81
                  },
                  "midfreq": {
                    "value": 69
                  },
                  "mix": {
                    "value": 19
                  },
                  "treble": {
                    "value": 62
                  },
                  "volume": {
                    "value": 0
                  }
                },
                "reverb": {
                  "__sps": {
                    "Chorus~": {},
                    "Delay~": {},
                    "Feedback~": {
                      "__sps": {
                        "Gate~": {}
                      }
                    },
                    "Mix~": {},
                    "Octave~": {
                      "__sps": {
                        "Shift~": {},
                        "Shift~[1]": {}
                      }
                    },
                    "Pitch~": {
                      "__sps": {
                        "Shift~": {},
                        "Shift~[1]": {}
                      }
                    },
                    "Reverb~": {
                      "__sps": {
                        "Blur~": {},
                        "CombL~": {},
                        "CombR~": {},
                        "Damp~": {},
                        "MapParams": {},
                        "RoomA~": {},
                        "RoomB~": {},
                        "Shuffle~": {}
                      }
                    },
                    "Volumes~": {}
                  },
                  "chorus": {
                    "value": 0
                  },
                  "damp": {
                    "value": 27
                  },
                  "decay": {
                    "value": 53
                  },
                  "delay": {
                    "value": 0
                  },
                  "diff": {
                    "value": 43
                  },
                  "feedback": {
                    "value": 0
                  },
                  "jitter": {
                    "value": 76
                  },
                  "mix": {
                    "value": 0
                  },
                  "octdamp": {
                    "value": 0
                  },
                  "octvol": {
                    "value": 0
                  },
                  "pitch": {
                    "value": 0
                  },
                  "pitchvol": {
                    "value": 0
                  },
                  "revvol": {
                    "value": 100
                  },
                  "size": {
                    "value": 82
                  },
                  "window": {
                    "value": 36
                  }
                },
                "trem": {
                  "__sps": {
                    "LFO~": {},
                    "TapTempo": {}
                  },
                  "depth": {
                    "value": 0
                  },
                  "rate": {
                    "value": 0
                  },
                  "spread": {
                    "value": 0
                  }
                }
              }
            },
            {
              "__sps": {
                "adsr": {
                  "attack": {
                    "value": 25
                  },
                  "delay": {
                    "value": 27.900000000000002
                  },
                  "release": {
                    "value": 118
                  },
                  "sustain": {
                    "value": 0.6
                  }
                },
                "delay": {
                  "feedback": {
                    "value": 0.2
                  },
                  "stereo-delay": {
                    "value": 72.4
                  },
                  "time": {
                    "value": 222
                  },
                  "wet": {
                    "value": 0.7
                  }
                },
                "filter1": {
                  "freq": {
                    "value": 1304
                  },
                  "q": {
                    "value": 0.09
                  },
                  "type": {
                    "value": 0
                  }
                },
                "filter2": {
                  "freq": {
                    "value": 925
                  },
                  "q": {
                    "value": 0.7
                  },
                  "type": {
                    "value": 0
                  }
                },
                "fm": {
                  "fm": {
                    "value": 0
                  },
                  "freq": {
                    "value": 121
                  },
                  "index": {
                    "value": 0.37
                  },
                  "level": {
                    "value": 0.87
                  }
                },
                "lfo1": {
                  "dest": {
                    "value": 0
                  },
                  "freq": {
                    "value": 0
                  }
                },
                "lfo2": {
                  "dest": {
                    "value": 0
                  },
                  "freq": {
                    "value": 2.4
                  }
                },
                "osc1": {
                  "level": {
                    "value": 0.5
                  },
                  "waveform": {
                    "value": 2
                  }
                },
                "osc2": {
                  "level": {
                    "value": 0.5
                  },
                  "waveform": {
                    "value": 1
                  }
                },
                "osc3": {
                  "level": {
                    "value": 0.33
                  },
                  "waveform": {
                    "value": 0
                  }
                },
                "overdrive": {
                  "__sps": {
                    "Drive~": {},
                    "Mix~": {},
                    "Post-EQ~": {
                      "__sps": {
                        "Bass~": {},
                        "Mid~": {},
                        "Treble~": {}
                      }
                    },
                    "Pre-EQ~": {},
                    "Volume~": {}
                  },
                  "bass": {
                    "value": 48
                  },
                  "drive": {
                    "value": 0
                  },
                  "highcut": {
                    "value": 20.1
                  },
                  "lowcut": {
                    "value": 13
                  },
                  "mid": {
                    "value": 81
                  },
                  "midfreq": {
                    "value": 69
                  },
                  "mix": {
                    "value": 19
                  },
                  "treble": {
                    "value": 62
                  },
                  "volume": {
                    "value": 0
                  }
                },
                "reverb": {
                  "__sps": {
                    "Chorus~": {},
                    "Delay~": {},
                    "Feedback~": {
                      "__sps": {
                        "Gate~": {}
                      }
                    },
                    "Mix~": {},
                    "Octave~": {
                      "__sps": {
                        "Shift~": {},
                        "Shift~[1]": {}
                      }
                    },
                    "Pitch~": {
                      "__sps": {
                        "Shift~": {},
                        "Shift~[1]": {}
                      }
                    },
                    "Reverb~": {
                      "__sps": {
                        "Blur~": {},
                        "CombL~": {},
                        "CombR~": {},
                        "Damp~": {},
                        "MapParams": {},
                        "RoomA~": {},
                        "RoomB~": {},
                        "Shuffle~": {}
                      }
                    },
                    "Volumes~": {}
                  },
                  "chorus": {
                    "value": 0
                  },
                  "damp": {
                    "value": 27
                  },
                  "decay": {
                    "value": 53
                  },
                  "delay": {
                    "value": 0
                  },
                  "diff": {
                    "value": 43
                  },
                  "feedback": {
                    "value": 0
                  },
                  "jitter": {
                    "value": 76
                  },
                  "mix": {
                    "value": 0
                  },
                  "octdamp": {
                    "value": 0
                  },
                  "octvol": {
                    "value": 0
                  },
                  "pitch": {
                    "value": 0
                  },
                  "pitchvol": {
                    "value": 0
                  },
                  "revvol": {
                    "value": 100
                  },
                  "size": {
                    "value": 82
                  },
                  "window": {
                    "value": 36
                  }
                },
                "trem": {
                  "__sps": {
                    "LFO~": {},
                    "TapTempo": {}
                  },
                  "depth": {
                    "value": 0
                  },
                  "rate": {
                    "value": 0
                  },
                  "spread": {
                    "value": 0
                  }
                }
              }
            }
          ]
        }
      }
    }
  ],
  "src": [
    {
      "code": "",
      "compression": "zlib",
      "encoding": "base64",
      "type": "wasm"
    }
  ]
}